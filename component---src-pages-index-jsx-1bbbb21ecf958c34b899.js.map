{"version":3,"sources":["webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx"],"names":["PostListing","getPostList","postList","this","props","postEdges","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","cover","title","date","excerpt","timeToRead","render","map","post","to","key","React","Component","Index","data","allMarkdownRemark","edges","tagsGroup","group","className","config","siteTitle","el","tag","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports","definition","SEO","description","image","postURL","postNode","postPath","postSEO","postMeta","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-pages-index-jsx-1bbbb21ecf958c34b899.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nclass PostListing extends React.Component {\r\n  getPostList() {\r\n    const postList = [];\r\n    this.props.postEdges.forEach(postEdge => {\r\n      postList.push({\r\n        path: postEdge.node.fields.slug,\r\n        tags: postEdge.node.frontmatter.tags,\r\n        cover: postEdge.node.frontmatter.cover,\r\n        title: postEdge.node.frontmatter.title,\r\n        date: postEdge.node.fields.date,\r\n        excerpt: postEdge.node.excerpt,\r\n        timeToRead: postEdge.node.timeToRead\r\n      });\r\n    });\r\n    return postList;\r\n  }\r\n  render() {\r\n    const postList = this.getPostList();\r\n    return (\r\n      <div>\r\n        {/* Your post list here. */\r\n        postList.map(post => (\r\n          <Link to={post.path} key={post.title}>\r\n            <h2>{post.title}</h2>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostListing;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport PostListing from \"../components/PostListing/PostListing\";\r\nimport SEO from \"../components/SEO/SEO\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link, navigate } from \"gatsby\"\r\n\r\nclass Index extends React.Component {\r\n  render() {\r\n    const postEdges = this.props.data.allMarkdownRemark.edges;\r\n    const tags = this.props.data.tagsGroup.group\r\n    return (\r\n      <Layout>\r\n        <div className=\"container index-container\">\r\n          <Helmet title={config.siteTitle} />\r\n          <SEO />\r\n\t  <div>Hey, all!<br />\r\n\t    I'm a full stack software developer and scripting enthusiast working on automation and writing about bash programming and development.\r\n\t  </div>\r\n          <PostListing postEdges={postEdges} />\r\n\t  <div><Link to={`/categories/blog/`}>blog</Link></div>\r\n\t  {tags.map(el=><div><Link to={`/tags/${el.tag}/`}>{el.tag}</Link></div>)}\r\n\t  \r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    tagsGroup: allMarkdownRemark {\r\n      group(field: frontmatter___tags) {\r\n        tag: fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [fields___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props;\r\n    let title;\r\n    let description;\r\n    let image;\r\n    let postURL;\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter;\r\n      ({ title } = postMeta);\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt;\r\n      image = postMeta.cover;\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    } else {\r\n      title = config.siteTitle;\r\n      description = config.siteDescription;\r\n      image = config.siteLogo;\r\n    }\r\n\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\r\n      }\r\n    ];\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BreadcrumbList\",\r\n          itemListElement: [\r\n            {\r\n              \"@type\": \"ListItem\",\r\n              position: 1,\r\n              item: {\r\n                \"@id\": postURL,\r\n                name: title,\r\n                image\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BlogPosting\",\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n          headline: title,\r\n          image: {\r\n            \"@type\": \"ImageObject\",\r\n            url: image\r\n          },\r\n          description\r\n        }\r\n      );\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : \"\"}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}