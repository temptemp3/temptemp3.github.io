{"version":3,"sources":["webpack:///./src/pages/index.jsx"],"names":["Index","render","postEdges","this","props","data","allMarkdownRemark","edges","tags","tagsGroup","group","className","title","config","siteTitle","to","map","el","tag","React","Component","pageQuery"],"mappings":"+QAUMA,E,gLACJC,OAAA,WACE,IAAMC,EAAYC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAC9CC,EAAOL,KAAKC,MAAMC,KAAKI,UAAUC,MACvC,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,6BACb,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAAC,IAAD,MACP,yCAAc,6BAAd,0IAGO,kBAAC,IAAD,CAAaZ,UAAWA,IAC/B,6BAAK,kBAAC,OAAD,CAAMa,GAAE,qBAAR,SACJP,EAAKQ,KAAI,SAAAC,GAAE,OAAE,6BAAK,kBAAC,OAAD,CAAMF,GAAE,SAAWE,EAAGC,IAAd,KAAuBD,EAAGC,Y,GAdpCC,IAAMC,WAsBXpB,YAGR,IAAMqB,EAAS","file":"component---src-pages-index-jsx-d8c796c3e469b24d66a1.js","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport PostListing from \"../components/PostListing/PostListing\";\r\nimport SEO from \"../components/SEO/SEO\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link, navigate } from \"gatsby\"\r\n\r\nclass Index extends React.Component {\r\n  render() {\r\n    const postEdges = this.props.data.allMarkdownRemark.edges;\r\n    const tags = this.props.data.tagsGroup.group\r\n    return (\r\n      <Layout>\r\n        <div className=\"container index-container\">\r\n          <Helmet title={config.siteTitle} />\r\n          <SEO />\r\n\t  <div>Hey, all!<br />\r\n\t    I'm a full stack software developer and scripting enthusiast working on automation and writing about bash programming and development.\r\n\t  </div>\r\n          <PostListing postEdges={postEdges} />\r\n\t  <div><Link to={`/categories/blog/`}>blog</Link></div>\r\n\t  {tags.map(el=><div><Link to={`/tags/${el.tag}/`}>{el.tag}</Link></div>)}\r\n\t  \r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    tagsGroup: allMarkdownRemark {\r\n      group(field: frontmatter___tags) {\r\n        tag: fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [fields___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}