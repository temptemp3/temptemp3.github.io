{"componentChunkName":"component---src-templates-post-jsx","path":"/bash-declare-integer","result":{"data":{"markdownRemark":{"html":"<p>Why declare integers? As you know, bash is not like most programming languages. One thing that makes it different is its type system; Unlike static and dynamic typed languages, it allows you to switch type-specific behaviors on/off through variable attributes. Hence, you would declare an integer in bash to make the variable <em>behave</em> more like an integer.</p>\n<p>Previously in <a href=\"bash-declare.html\">bash using declare</a>, we covered all the uses for the bash builtin command declare or <em>typeset</em>. Here we focus on the usage for specifying integer variables in bash. For sake of simplicity we will use declare instead of typeset.</p>\n<h2 id=\"declaring-integer-variables-in-bash\" style=\"position:relative;\"><a href=\"#declaring-integer-variables-in-bash\" aria-label=\"declaring integer variables in bash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaring integer variables in bash</h2>\n<p>As they say, <em>All is string</em> in bash. However, if we hope to escape from characters and strings to use numbers, we may opt to restrict a variable to storing integers like 1 and -1. And in the case that the integer does not know what to do with the value it is being assigned, assign it to 0. To accomplish this in bash, we turn on the integer attribute for the variable using builtins <code class=\"language-text\">declare</code> builtin combined with <code class=\"language-text\">-i</code>. Makes sense, right? We can also use <code class=\"language-text\">local</code> or <code class=\"language-text\">export</code> in place of declare if we needed.</p>\n<p>Follows are examples of int variable assignment in action.</p>\n<h3 id=\"example-assigning-int-value-without-quotes\" style=\"position:relative;\"><a href=\"#example-assigning-int-value-without-quotes\" aria-label=\"example assigning int value without quotes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Assigning int value without quotes</h3>\n<p>Assigning an int value without double-quotes would as expected assign a variable the numeric value of the unquoted string. That is, if the unquoted string equals 1, the variable would be assigned the value 1.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> -i int\n  <span class=\"token comment\">## assign int value without quotes</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n  cecho green <span class=\"token string\">\"int=1\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 1</span>\n<span class=\"token punctuation\">}</span>\n_</code></pre></div>\n<h3 id=\"example-assigning-int-value-with-quotes\" style=\"position:relative;\"><a href=\"#example-assigning-int-value-with-quotes\" aria-label=\"example assigning int value with quotes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Assigning int value with quotes</h3>\n<p>In the last example we assigned int the value of 1 as you would expect, without using quotes. It turns out that quotes do not affect assignment of integer variables in bash if the symbol on the right hand side begins with a digit. You will see later that this is not the case when the right hand side could be a variable name.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> -i int\n  <span class=\"token comment\">## assign int value with quotes</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span>\n  cecho green <span class=\"token string\">\"int=2\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 2</span>\n<span class=\"token punctuation\">}</span>\n_</code></pre></div>\n<h3 id=\"example-assigning-int-value-a-string-matching-a-variable-name\" style=\"position:relative;\"><a href=\"#example-assigning-int-value-a-string-matching-a-variable-name\" aria-label=\"example assigning int value a string matching a variable name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Assigning int value a string matching a variable name</h3>\n<p>In the last two examples, we were doing the right thing, actually assigning an int variable a numberical value. What happens if we try to assign it the string two. You may be surprised what you find.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> var\n  <span class=\"token builtin class-name\">local</span> -i int\n  <span class=\"token comment\">## assign int value of another variable</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var\n  cecho green <span class=\"token string\">\"int=var\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 0</span>\n<span class=\"token punctuation\">}</span>\n_</code></pre></div>\n<h3 id=\"example-assigning-int-variable-name-with-side-effects\" style=\"position:relative;\"><a href=\"#example-assigning-int-variable-name-with-side-effects\" aria-label=\"example assigning int variable name with side effects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Assigning int variable name with side effects</h3>\n<p>In the last examples, we assigned in the name of a varaible and saw what happened. Now let's introduce side effects.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> var\n  <span class=\"token builtin class-name\">local</span> -i int\n  <span class=\"token comment\">## assign int value of another variable with side effects</span>\n  <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n  cecho green <span class=\"token string\">\"int=var\"</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 0</span>\n  cecho green <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token punctuation\">((</span> var<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span>\"</span>\n  <span class=\"token variable\"><span class=\"token punctuation\">((</span> var<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span>\n  cecho green <span class=\"token string\">\"int=var\"</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 1</span>\n<span class=\"token punctuation\">}</span>\n_</code></pre></div>\n<h3 id=\"example-the-rest-of-int-variable-assignment\" style=\"position:relative;\"><a href=\"#example-the-rest-of-int-variable-assignment\" aria-label=\"example the rest of int variable assignment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: The rest of int variable assignment</h3>\n<p>It may take some time to split this variable assignment example script into few enough bytes to be easily processed by the reader. Until then, here is the rest of int variable assignment examples.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> var\n  <span class=\"token builtin class-name\">local</span> empty_var\n  <span class=\"token builtin class-name\">local</span> -i int\n  <span class=\"token comment\">## assign int value of another variable w/ increment</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var+1\n  cecho green <span class=\"token string\">\"int=var+1\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 4</span>\n  <span class=\"token comment\">## assign int value of another variable empty </span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>empty_var\n  cecho green <span class=\"token string\">\"int=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>empty_var<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 0</span>\n  <span class=\"token comment\">## assign int value of another variable in quotes</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"var\"</span>\n  cecho green <span class=\"token string\">\"int=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>var<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 3</span>\n  <span class=\"token comment\">## assign int value of another variable random</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"RANDOM\"</span>\n  cecho green <span class=\"token string\">\"int=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>RANDOM<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\n  cecho yellow <span class=\"token string\">\"int: <span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># maybe 1234</span>\n<span class=\"token punctuation\">}</span>\n_</code></pre></div>\n<h3 id=\"example-putting-int-variable-assignment-all-together\" style=\"position:relative;\"><a href=\"#example-putting-int-variable-assignment-all-together\" aria-label=\"example putting int variable assignment all together permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Putting int variable assignment all together</h3>\n<p>Here is the demo script left so that you may see what examples above look like in the whole context of the script. Feel free to skip through as needed.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> var\n  <span class=\"token builtin class-name\">local</span> empty_var\n  <span class=\"token builtin class-name\">local</span> -i int\n  <span class=\"token comment\">## assign int value without quote</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n  cecho green <span class=\"token string\">\"int=1\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 1</span>\n  <span class=\"token comment\">## assign int value with quote</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span>\n  cecho green <span class=\"token string\">\"int=2\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 2</span>\n  <span class=\"token comment\">## assign int value of another variable</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var\n  cecho green <span class=\"token string\">\"int=var\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 0</span>\n  <span class=\"token comment\">## assign other variable value to int</span>\n  <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>\n  cecho green <span class=\"token string\">\"var=3\"</span>\n  <span class=\"token comment\">## assign int value of another variable again</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var\n  cecho green <span class=\"token string\">\"int=var\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 3</span>\n  <span class=\"token comment\">## assign int value of another variable w/ increment</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var+1\n  cecho green <span class=\"token string\">\"int=var+1\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 4</span>\n  <span class=\"token comment\">## assign int value of another variable empty </span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>empty_var\n  cecho green <span class=\"token string\">\"int=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>empty_var<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 0</span>\n  <span class=\"token comment\">## assign int value of another variable in quotes</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"var\"</span>\n  cecho green <span class=\"token string\">\"int=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>var<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\n  cecho yellow <span class=\"token string\">\"<span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># 3</span>\n  <span class=\"token comment\">## assign int value of another variable random</span>\n  <span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"RANDOM\"</span>\n  cecho green <span class=\"token string\">\"int=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>RANDOM<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span>\n  cecho yellow <span class=\"token string\">\"int: <span class=\"token variable\">${int}</span>\"</span> <span class=\"token comment\"># maybe 1234</span>\n<span class=\"token punctuation\">}</span>\n_</code></pre></div>\n<p>Source: <a href=\"https://github.com/temptemp3/beard.sh/blob/bashboy/scripts/210513-run-example-001-bash-declare-intenger-assignment.sh\">210513-run-example-001-bash-declare-intenger-assignment.sh</a></p>\n<p>Here is what you would expect to see if you were to run the script as bashboy.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bashboy run:example-001-bash-declare-intenger-assignment\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> \n<span class=\"token number\">1</span> \n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> \n<span class=\"token number\">2</span> \n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var \n<span class=\"token number\">0</span> \n<span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> \n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var \n<span class=\"token number\">3</span> \n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var+1 \n<span class=\"token number\">4</span> \n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"empty_var\"</span> \n<span class=\"token number\">0</span> \n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"var\"</span> \n<span class=\"token number\">3</span> \n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"RANDOM\"</span> \nint: <span class=\"token number\">12839</span> </code></pre></div>\n<p>As you see there are some quirks to keep in mind when using the integer attibute in bash, especially in the case when assigning an alphanumeric string not begining with zero matching an existing variable name to an integer variable. However, it is possibly to prevent undefined behavior from occurring by paying attention to scope.</p>\n<!-- here -->\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Let's skip to the good part, creating integer variables!<br>\nHere is how to declare an integer variable in bash. Note that <code class=\"language-text\">int</code> is not a keyword for integer. That is the job of the <code class=\"language-text\">-i</code> option to the builtin declare.</p>\n<ul>\n<li>determine if a variable is an integer *</li>\n<li>create an integer variable *</li>\n</ul>\n<h3 id=\"determine-if-a-variable-is-an-integer\" style=\"position:relative;\"><a href=\"#determine-if-a-variable-is-an-integer\" aria-label=\"determine if a variable is an integer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>determine if a variable is an integer</h3>\n<p>There is more than one way to determine if a variable is an integer or not but you could get away with checking if the variable has the -i attribute. After all, an integer variable holds integer values despite what you try to assign to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># check if a variable is an integer</span>\n<span class=\"token builtin class-name\">declare</span> -p int\t\t\t<span class=\"token comment\"># declare -i int=\"1\"</span></code></pre></div>\n<p>We say a variable is an integer if the <span class=\"w3-codespan\">-i</span> attribute set, i.e. if <span class=\"w3-codespan\">declare -p</span> returns either <span class=\"w3-codespan\">-i</span> or <span class=\"w3-codespan\">-ir</span>. Note that in the case that the variable is found to have the <span class=\"w3-codespan\">-n</span> attribute set, testing the end nameref is required to determine if the variable is an integer.</p>\n<h3 id=\"create-an-integer-variable\" style=\"position:relative;\"><a href=\"#create-an-integer-variable\" aria-label=\"create an integer variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create an integer variable</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># create an integer variable and modify through assignment</span>\n<span class=\"token builtin class-name\">unset</span> one\t\t\t<span class=\"token comment\"># just to be sure</span>\n<span class=\"token builtin class-name\">declare</span> -i int\t\t<span class=\"token comment\"># int is an integer</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\t\t\t\t<span class=\"token comment\"># int=$(( 5 ))=5</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">+=</span><span class=\"token number\">1</span> \t\t\t\t<span class=\"token comment\"># int=$(( int + 1 ))=6</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">+=</span>int+1 \t\t\t<span class=\"token comment\"># int=$(( int + int + 1 ))=13</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>one\t\t\t\t<span class=\"token comment\"># int=$(( one ))=</span></code></pre></div>\n<p>Now look at what happens without the integer attribute.</p>\n<pre><code># result of assignment without integer attribute\nunset int\t\t\t# just to be sure\nunset one\t\t\t# just to be sure\nint=5\t\t\t\t# int=5\nint+=1 \t\t\t\t# int=${int}1=51\nint+=int+1 \t\t\t# int=${int}+int+1=51int+1\nint=one\t\t\t\t# int=one\n</code></pre>\n<p>Now you see what happens if you forget to declare a variable as an integer. Not something that you want running loose in your program.</p>\n<h3 id=\"breakdown\" style=\"position:relative;\"><a href=\"#breakdown\" aria-label=\"breakdown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>breakdown</h3>\n<p><span class=\"w3-codespan\">declare -i int</span></p>\n<p>We say that if there is a variable named int, it now has the integer attribute set. If the variable named in the declare command is not set yet, then the attribute is applied to a future variable unless <span class=\"w3-codespan\">unset</span>. Using <span class=\"w3-codespan\">local</span> instead of <span class=\"w3-codespan\">declare</span>, causes the attribute to only be applied in subsequent assignments in the local scope.</p>\n<p><span class=\"w3-codespan\">int=5</span></p>\n<p>Depending on whether the variable has the integer attribute this sets the value of int to the string 5 or arithmetic expansion of 5. In the case of 5, the result yields 5 for both cases.</p>\n<p><span class=\"w3-codespan\">int+=1</span></p>\n<p>Should increment int if integer attribute set.</p>\n<p><span class=\"w3-codespan\">int+=int+1</span></p>\n<p>Should double int and increment if integer attribute set.</p>\n<h2 id=\"definitions\" style=\"position:relative;\"><a href=\"#definitions\" aria-label=\"definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definitions</h2>\n<p>Definition of types of integer variables.</p>\n<ul>\n<li>Integer variable</li>\n<li>Read-only integer variable</li>\n<li>Pure integer variable</li>\n</ul>\n<h3 id=\"integer-variable\" style=\"position:relative;\"><a href=\"#integer-variable\" aria-label=\"integer variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>integer variable</h3>\n<p>A variable with the <span class=\"w3-codespan\">-i</span> attribute set.</p>\n<p>We define an integer variable in bash as a variable with the integer attribute set. The question we ask here is, \"Is it valid to declare a variable with the integer attribute in combination with another attribute?\" This may be expanded later.</p>\n<h3 id=\"read-only-integer-variable\" style=\"position:relative;\"><a href=\"#read-only-integer-variable\" aria-label=\"read only integer variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>read-only integer variable</h3>\n<p>An integer variable with the <span class=\"w3-codespan\">-r</span> attribute set.</p>\n<h3 id=\"pure-integer-variable\" style=\"position:relative;\"><a href=\"#pure-integer-variable\" aria-label=\"pure integer variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pure integer variable</h3>\n<p>A variable with only the <span class=\"w3-codespan\">-i</span> attribute set.</p>\n<p>We define a pure integer variable in bash as a variable with only the integer attribute set.</p>\n<h2 id=\"motivation\" style=\"position:relative;\"><a href=\"#motivation\" aria-label=\"motivation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motivation</h2>\n<p>You may be wondering why you would even bother declaring integer variables in bash. After all, aren't all variable strings? Yes exactly, but using declare to add the integer attribute to a variable affects assignment.</p>\n<h3 id=\"why-declare-integers-in-bash\" style=\"position:relative;\"><a href=\"#why-declare-integers-in-bash\" aria-label=\"why declare integers in bash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why declare integers in bash?</h3>\n<p>To better understand how and why integers are declared in bash, it is helpful to look at behavior with and without using integer variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\">## test-bash-declare-integer-1</span>\n<span class=\"token comment\">## - fun with integers attributes</span>\n<span class=\"token comment\">## version 0.0.1 - initial</span>\n<span class=\"token comment\">##################################################</span>\ntest-bash-declare-integer-<span class=\"token function-name function\">1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">## setup</span>\n  <span class=\"token builtin class-name\">local</span> lonely_integer\t\t<span class=\"token comment\"># one int is fine</span>\n  <span class=\"token builtin class-name\">local</span> i\t\t\t<span class=\"token comment\"># for ease of use</span>\n  <span class=\"token builtin class-name\">declare</span> -n <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span>lonely_integer \t<span class=\"token comment\"># declare attributes</span>\n  <span class=\"token comment\">## (1) do something wrong with integers</span>\n  <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span>asdf\t\t\t<span class=\"token comment\"># (1) asdf as i is asdf</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${i}</span>\t\t\t<span class=\"token comment\"># (2) asdf</span>\n  <span class=\"token comment\">## (2) what if we give it the integer attribute?</span>\n  <span class=\"token builtin class-name\">declare</span> -i lonely_integer\t<span class=\"token comment\"># (1) declare integer</span>\n  <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span>asdf\t\t\t<span class=\"token comment\"># (2) asdf as i is 0</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${i}</span>\t\t\t<span class=\"token comment\"># (3) 0</span>\n  <span class=\"token comment\">## (3) what happened?</span>\n  <span class=\"token builtin class-name\">declare</span> +i lonely_integer\t<span class=\"token comment\"># (1) revert back</span>\n  <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> ${asdf} <span class=\"token variable\">))</span></span>\t\t<span class=\"token comment\"># (2) what happens in (2) under (1) conditions</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${i}</span>\t\t\t<span class=\"token comment\"># (3) 0</span>\n  <span class=\"token comment\">## (4) proof: part i (without integer attribute)</span>\n  <span class=\"token assign-left variable\">asdf</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\t\t\t<span class=\"token comment\"># assignment for proof</span>\n  <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> ${asdf} <span class=\"token variable\">))</span></span>\t\t<span class=\"token comment\"># same as (3.2)</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${i}</span>\t\t\t<span class=\"token comment\"># 1</span>\n  <span class=\"token comment\">## (5) proof: part ii (with integer attribute)</span>\n  <span class=\"token builtin class-name\">declare</span> -i lonely_integer\t<span class=\"token comment\"># same as (2.1)</span>\n  <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span>asdf\t\t\t<span class=\"token comment\">#  asdf as i is 1</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${i}</span>\t\t\t<span class=\"token comment\"># 1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">##################################################</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>}</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">then</span>\n <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">else</span>\n <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span> <span class=\"token comment\"># wrong args</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token comment\">##################################################</span>\ntest-bash-declare-integer-1\n<span class=\"token comment\">##################################################</span>\n<span class=\"token comment\">## generated by create-stub2.sh v0.1.1</span>\n<span class=\"token comment\">## on Sun, 03 Feb 2019 17:36:53 +0900</span>\n<span class=\"token comment\">## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;</span>\n<span class=\"token comment\">##################################################</span></code></pre></div>\n<p>You see that adding the integer attribute forces arithmetic expressions to be evaluated on assignment.</p>\n<h2 id=\"questions\" style=\"position:relative;\"><a href=\"#questions\" aria-label=\"questions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Questions</h2>\n<p>Here are a few quesrtions related to declaring integers in bash.</p>\n<h3 id=\"how-do-i-compare-two-integers\" style=\"position:relative;\"><a href=\"#how-do-i-compare-two-integers\" aria-label=\"how do i compare two integers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>how do I compare two integers?</h3>\n<p>Arithmetic binary operators can be used to compare integers in bash in the form <code class=\"language-text\">arg1 OP arg2</code>. For example, we may test if two integers are not equal as follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">test</span> <span class=\"token operator\">!</span> <span class=\"token variable\">${a}</span> -eq <span class=\"token variable\">${b}</span> <span class=\"token comment\"># a != b</span></code></pre></div>\n<p>If the variable a and b are attributed with the integer attribute, then nothing unexpected should happen. However, if a or b are not attributed with the integer attribute, then an error may occur as follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token string\">\"c d\"</span>\n<span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span><span class=\"token string\">\"e\"</span>\n<span class=\"token builtin class-name\">test</span> <span class=\"token variable\">${a}</span> -eq <span class=\"token variable\">${b}</span> <span class=\"token comment\">#</span>\n<span class=\"token comment\">#bash: test: too many arguments</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${?}</span> <span class=\"token comment\"># 2</span>\n<span class=\"token builtin class-name\">set</span> -v -x \n<span class=\"token builtin class-name\">test</span> <span class=\"token variable\">${a}</span> -eq <span class=\"token variable\">${b}</span> <span class=\"token comment\">#</span>\n<span class=\"token comment\">#+ test a d -eq c </span>\n<span class=\"token comment\">#bash: test: too many arguments</span></code></pre></div>\n<h3 id=\"how-do-i-declare-an-integer-bash\" style=\"position:relative;\"><a href=\"#how-do-i-declare-an-integer-bash\" aria-label=\"how do i declare an integer bash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>how do I declare an integer bash?</h3>\n<p>Declare integer variables using the declare builtin with the -i option.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">declare</span> -i myint</code></pre></div>\n<h3 id=\"how-do-i-declare-a-local-integer-in-bash\" style=\"position:relative;\"><a href=\"#how-do-i-declare-a-local-integer-in-bash\" aria-label=\"how do i declare a local integer in bash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>how do I declare a local integer in bash?</h3>\n<p>Declare integer variables with local bindings using declare in conjunction with the local (1). In the shortest form, the operation may be performed in a single statement (2) consisting of local, the integer attribute option -i, and variable name.</p>\n<p>(1), separate local binding and integer attribute assignment</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">local</span> myint\n<span class=\"token builtin class-name\">declare</span> -i myint</code></pre></div>\n<p>or (2), local binding with integer attribute set</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">local</span> -i myint</code></pre></div>\n<p>Either way works.</p>","tableOfContents":"<ul>\n<li><a href=\"/bash-declare-integer/#declaring-integer-variables-in-bash\">Declaring integer variables in bash</a></li>\n<li><a href=\"/bash-declare-integer/#usage\">Usage</a></li>\n<li><a href=\"/bash-declare-integer/#definitions\">Definitions</a></li>\n<li><a href=\"/bash-declare-integer/#motivation\">Motivation</a></li>\n<li><a href=\"/bash-declare-integer/#questions\">Questions</a></li>\n</ul>","timeToRead":9,"excerpt":"Why declare integers? As you know, bash is not like most programming languages. One thing that makes it different is its type system; Unlike…","frontmatter":{"title":"Bash declare integer","cover":"https://unsplash.it/1152/300/?random?BirchintheRoses","date":"29/09/2029","category":"blog","tags":["bash","bash-builtins"]},"fields":{"slug":"/bash-declare-integer","date":"2029-09-19T15:00:00.000Z"}}},"pageContext":{"slug":"/bash-declare-integer","nexttitle":"Bash arrays","nextslug":"/bash-arrays","prevtitle":"Enable metrics collction for an auto scaling group","prevslug":"/enable-metrics-collction-for-an-auto-scaling-group"}},"staticQueryHashes":[]}