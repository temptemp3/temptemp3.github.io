{"componentChunkName":"component---src-templates-post-jsx","path":"/bash-declare-integer","result":{"data":{"markdownRemark":{"html":"<p>In <a href=\"declare.html#bash-declare-integer\">bash using declare</a> we covered all the uses for the bash builtin command declare. Here we focus on the usage to declare for integer variables in bash.</p>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>introduction</h2>\n<p>All is string in bash. However, we may opt to restrict a variable to only storing whole numbers like 1 and -1. To accomplish this in bash, we turn on the integer attribute for the variable using builtins such as <code class=\"language-text\">local</code>, <code class=\"language-text\">declare</code>, and <code class=\"language-text\">export</code> as follows.</p>\n<p>Example: declaring and assigning integer variable</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">unset</span> var <span class=\"token comment\"># unset test variable just in case</span>\n<span class=\"token builtin class-name\">unset</span> empty_var <span class=\"token comment\"># unset test variable just in case</span>\n<span class=\"token builtin class-name\">declare</span> -i int\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${int}</span> <span class=\"token comment\"># 1</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${int}</span> <span class=\"token comment\"># 2</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${int}</span> <span class=\"token comment\"># 0</span>\n<span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${int}</span> <span class=\"token comment\"># 3</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>var+1\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${int}</span> <span class=\"token comment\"># 4</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>empty_var\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${int}</span> <span class=\"token comment\"># 0</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"var\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${int}</span> <span class=\"token comment\"># 3</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token string\">\"RANDOM\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${int}</span> <span class=\"token comment\"># 1234</span></code></pre></div>\n<!-- here -->\n<h2 id=\"usage\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>usage</h2>\n<p>Let's skip to the good part, creating integer variables!<br>\nHere is how to declare an integer variable in bash. Note that <code class=\"language-text\">int</code> is not a keyword for integer. That is the job of the <code class=\"language-text\">-i</code> option to the builtin declare.</p>\n<ul>\n<li>determine if a variable is an integer *</li>\n<li>create an integer variable *</li>\n</ul>\n<h3 id=\"determine-if-a-variable-is-an-integer\"><a href=\"#determine-if-a-variable-is-an-integer\" aria-label=\"determine if a variable is an integer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>determine if a variable is an integer</h3>\n<p>There is more than one way to determine if a variable is an integer or not but you could get away with checking if the variable has the -i attribute. After all, an integer variable holds integer values despite what you try to assign to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># check if a variable is an integer</span>\n<span class=\"token builtin class-name\">declare</span> -p int\t\t\t<span class=\"token comment\"># declare -i int=\"1\"</span></code></pre></div>\n<p>We say a variable is an integer if the <span class=\"w3-codespan\">-i</span> attribute set, i.e. if <span class=\"w3-codespan\">declare -p</span> returns either <span class=\"w3-codespan\">-i</span> or <span class=\"w3-codespan\">-ir</span>. Note that in the case that the variable is found to have the <span class=\"w3-codespan\">-n</span> attribute set, testing the end nameref is required to determine if the variable is an integer.</p>\n<h3 id=\"create-an-integer-variable\"><a href=\"#create-an-integer-variable\" aria-label=\"create an integer variable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create an integer variable</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># create an integer variable and modify through assignment</span>\n<span class=\"token builtin class-name\">unset</span> one\t\t\t<span class=\"token comment\"># just to be sure</span>\n<span class=\"token builtin class-name\">declare</span> -i int\t\t<span class=\"token comment\"># int is an integer</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\t\t\t\t<span class=\"token comment\"># int=$(( 5 ))=5</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">+=</span><span class=\"token number\">1</span> \t\t\t\t<span class=\"token comment\"># int=$(( int + 1 ))=6</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">+=</span>int+1 \t\t\t<span class=\"token comment\"># int=$(( int + int + 1 ))=13</span>\n<span class=\"token assign-left variable\">int</span><span class=\"token operator\">=</span>one\t\t\t\t<span class=\"token comment\"># int=$(( one ))=</span></code></pre></div>\n<p>Now look at what happens without the integer attribute.</p>\n<pre><code># result of assignment without integer attribute\nunset int\t\t\t# just to be sure\nunset one\t\t\t# just to be sure\nint=5\t\t\t\t# int=5\nint+=1 \t\t\t\t# int=${int}1=51\nint+=int+1 \t\t\t# int=${int}+int+1=51int+1\nint=one\t\t\t\t# int=one\n</code></pre>\n<p>Now you see what happens if you forget to declare a variable as an integer. Not something that you want running loose in your program.</p>\n<h3 id=\"breakdown\"><a href=\"#breakdown\" aria-label=\"breakdown permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>breakdown</h3>\n<p><span class=\"w3-codespan\">declare -i int</span></p>\n<p>We say that if there is a variable named int, it now has the integer attribute set. If the variable named in the declare command is not set yet, then the attribute is applied to a future variable unless <span class=\"w3-codespan\">unset</span>. Using <span class=\"w3-codespan\">local</span> instead of <span class=\"w3-codespan\">declare</span>, causes the attribute to only be applied in subsequent assignments in the local scope.</p>\n<p><span class=\"w3-codespan\">int=5</span></p>\n<p>Depending on whether the variable has the integer attribute this sets the value of int to the string 5 or arithmetic expansion of 5. In the case of 5, the result yields 5 for both cases.</p>\n<p><span class=\"w3-codespan\">int+=1</span></p>\n<p>Should increment int if integer attribute set.</p>\n<p><span class=\"w3-codespan\">int+=int+1</span></p>\n<p>Should double int and increment if integer attribute set.</p>\n<h2 id=\"introduction-1\"><a href=\"#introduction-1\" aria-label=\"introduction 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>introduction</h2>\n<p>Bash variables are untyped. That is, if a value is assigned to a variable without declaring variable attributes, the value is treated like any other variable, a string. Declaring a variable with the integer attribute affects assignment and treatment in arithmetic expressions.</p>\n<h2 id=\"definitions\"><a href=\"#definitions\" aria-label=\"definitions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>definitions</h2>\n<p>Definition of types of integer variables.</p>\n<ul>\n<li>Integer variable</li>\n<li>Read-only integer variable</li>\n<li>Pure integer variable</li>\n</ul>\n<h3 id=\"integer-variable\"><a href=\"#integer-variable\" aria-label=\"integer variable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>integer variable</h3>\n<p>A variable with the <span class=\"w3-codespan\">-i</span> attribute set.</p>\n<p>We define an integer variable in bash as a variable with the integer attribute set. The question we ask here is, \"Is it valid to declare a variable with the integer attribute in combination with another attribute?\" This may be expanded later.</p>\n<h3 id=\"read-only-integer-variable\"><a href=\"#read-only-integer-variable\" aria-label=\"read only integer variable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Read-only integer variable</h3>\n<p>An integer variable with the <span class=\"w3-codespan\">-r</span> attribute set.</p>\n<h3 id=\"pure-integer-variable\"><a href=\"#pure-integer-variable\" aria-label=\"pure integer variable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pure integer variable</h3>\n<p>A variable with only the <span class=\"w3-codespan\">-i</span> attribute set.</p>\n<p>We define a pure integer variable in bash as a variable with only the integer attribute set.</p>\n<h2 id=\"motivation\"><a href=\"#motivation\" aria-label=\"motivation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>motivation</h2>\n<p>You may be wondering why you would even bother declaring integer variables in bash. After all, aren't all variable strings? Yes exactly, but using declare to add the integer attribute to a variable affects assignment.</p>\n<h3 id=\"why-declare-integers-in-bash\"><a href=\"#why-declare-integers-in-bash\" aria-label=\"why declare integers in bash permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why declare integers in bash?</h3>\n<p>To better understand how and why integers are declared in bash, it is helpful to look at behavior with and without using integer variables.</p>\n<pre><code>#!/bin/bash\n## test-bash-declare-integer-1\n## - fun with integers attributes\n## version 0.0.1 - initial\n##################################################\ntest-bash-declare-integer-1() {\n  ## setup\n  local lonely_integer\t\t# one int is fine\n  local i\t\t\t# for ease of use\n  declare -n i=lonely_integer \t# declare attributes\n  ## (1) do something wrong with integers\n  i=asdf\t\t\t# (1) asdf as i is asdf\n  echo ${i}\t\t\t# (2) asdf\n  ## (2) what if we give it the integer attribute?\n  declare -i lonely_integer\t# (1) declare integer\n  i=asdf\t\t\t# (2) asdf as i is 0\n  echo ${i}\t\t\t# (3) 0\n  ## (3) what happened?\n  declare +i lonely_integer\t# (1) revert back\n  i=$(( ${asdf} ))\t\t# (2) what happens in (2) under (1) conditions\n  echo ${i}\t\t\t# (3) 0\n  ## (4) proof: part i (without integer attribute)\n  asdf=1\t\t\t# assignment for proof\n  i=$(( ${asdf} ))\t\t# same as (3.2)\n  echo ${i}\t\t\t# 1\n  ## (5) proof: part ii (with integer attribute)\n  declare -i lonely_integer\t# same as (2.1)\n  i=asdf\t\t\t#  asdf as i is 1\n  echo ${i}\t\t\t# 1\n}\n##################################################\nif [ ${#} -eq 0 ] \nthen\n true\nelse\n exit 1 # wrong args\nfi\n##################################################\ntest-bash-declare-integer-1\n##################################################\n## generated by create-stub2.sh v0.1.1\n## on Sun, 03 Feb 2019 17:36:53 +0900\n## see &lt;https://github.com/temptemp3/sh2&gt;\n##################################################\n</code></pre>\n<p>You see that adding the integer attribute forces arithmetic expressions to be evaluated on assignment.</p>\n<h2 id=\"questions\"><a href=\"#questions\" aria-label=\"questions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Questions</h2>\n<h3 id=\"how-do-i-compare-two-integers\"><a href=\"#how-do-i-compare-two-integers\" aria-label=\"how do i compare two integers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do I compare two integers?</h3>\n<p>Arithmetic binary operators can be used to <a href=\"conditionals.html#arithmetic\">compare integers in bash</a> in the form <span class=\"w3-codespan\">arg1 OP arg2</span>. For example, we may test if two integers are not equal as follows.</p>\n<pre><code>test ! ${a} -eq ${b} # a != b\n</code></pre>\n<h3 id=\"how-do-i-declare-an-integer-bash\"><a href=\"#how-do-i-declare-an-integer-bash\" aria-label=\"how do i declare an integer bash permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do I declare an integer bash?</h3>\n<p>Declare integer variables using the <span class=\"w3-codespan\">-i</span> option.</p>\n<pre><code>declare -i myint\n</code></pre>\n<h3 id=\"how-do-i-declare-a-local-integer-in-bash\"><a href=\"#how-do-i-declare-a-local-integer-in-bash\" aria-label=\"how do i declare a local integer in bash permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do I declare a local integer in bash?</h3>\n<p>Declare integer variables with local bindings using declare in conjunction with the local. In the shortest form, the operation may be performed in a single statement consisting of local, the integer option flag, and variable name.</p>\n<pre><code>local myint\ndeclare -i myint\n</code></pre>\n<p>See <a href=\"local.html#declare-local-integer\">declaring a local integer</a></p>","timeToRead":5,"excerpt":"In bash using declare we covered all the uses for the bash builtin command declare. Here we focus on the usage to declare for integer…","frontmatter":{"title":"Bash declare integer","cover":"https://unsplash.it/1152/300/?random?BirchintheRoses","date":"29/09/2029","category":"blog","tags":["bash","bash-builtins"]},"fields":{"slug":"/bash-declare-integer","date":"2029-09-19T15:00:00.000Z"}}},"pageContext":{"slug":"/bash-declare-integer","nexttitle":"Bash functions","nextslug":"/bash-functions","prevtitle":"Bash declare","prevslug":"/bash-declare"}}}