{"componentChunkName":"component---src-templates-post-jsx","path":"/bash-functions","result":{"data":{"markdownRemark":{"html":"<p>Read in 16 minutes</p>\n<p>Shell functions in bash allow you to name groups of commands to be run at a later time. Once named, command groups may be executed by using the function name. Each function has its own set of positional parameters when called. Variable attributes such as local may apply within a function. </p>\n<hr>\n<h2 id=\"function-help\"><a href=\"#function-help\" aria-label=\"function help permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function help</h2>\n<p><span class=\"w3-codespan\">help function</span> tells you how to create functions in bash, about positional parameters, and exit statuses, which is pretty much all that you need to know about bash functions to get started.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">help</span> <span class=\"token keyword\">function</span>\nfunction: <span class=\"token keyword\">function</span> <span class=\"token function-name function\">name</span> <span class=\"token punctuation\">{</span> COMMANDS <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> or <span class=\"token function-name function\">name</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> COMMANDS <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    Define shell function.\n\n    Create a shell <span class=\"token keyword\">function</span> named NAME.  When invoked as a simple command,\n    NAME runs COMMANDs <span class=\"token keyword\">in</span> the calling shell<span class=\"token string\">'s context.  When NAME is invoked,\n    the arguments are passed to the function as <span class=\"token variable\">$1</span>...<span class=\"token variable\">$n</span>, and the function'</span>s\n    name is <span class=\"token keyword\">in</span> <span class=\"token variable\">$FUNCNAME</span><span class=\"token builtin class-name\">.</span>\n\n    Exit Status:\n    Returns success unless NAME is readonly.</code></pre></div>\n<hr>\n<h2 id=\"function-types\"><a href=\"#function-types\" aria-label=\"function types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function types</h2>\n<ul>\n<li>simple functions </li>\n<li>returns non-empty standard output else standard error without a non-zero exit code</li>\n<li>dynamic functions </li>\n<li>functions with variable definitions</li>\n<li>setup function </li>\n<li>sets variable from a function</li>\n<li>wrapper functions </li>\n<li>functions serving as a wrapper to other functions, external, builtin commands</li>\n<li>oop functions </li>\n<li>child functions </li>\n<li>parent functions </li>\n<li>nested functions </li>\n<li>functions inside functions</li>\n<li>once functions </li>\n<li>functions that have payloads that execute at most once</li>\n<li>echo function </li>\n<li>functions that write to standard output</li>\n<li>lazyload function </li>\n<li>functions that have bodies read only before execution</li>\n<li>export function </li>\n<li>functions attributed as export</li>\n<li>anonymous functions </li>\n<li>functions that are once and nameless</li>\n<li>exit functions </li>\n<li>functions used for a trap of exit signal</li>\n<li>read functions </li>\n<li>functions implemented using read</li>\n<li>recursive functions </li>\n<li>functions that call themselves</li>\n<li>map functions </li>\n<li>functions that apply an arbitrary function to elements in a list of arguments, returning the resulting list</li>\n</ul>\n<h3 id=\"simple-functions\"><a href=\"#simple-functions\" aria-label=\"simple functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>simple functions</h3>\n<p>Functions are simple in bash. At least this one is. It puts a string on the screen. </p>\n<p>Commands</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">simple-<span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token builtin class-name\">echo</span> as simple as it gets  \n<span class=\"token punctuation\">}</span>\nsimple-function</code></pre></div>\n<p>Output</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">as simple as it gets</code></pre></div>\n<h3 id=\"dynamic-functions\"><a href=\"#dynamic-functions\" aria-label=\"dynamic functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dynamic functions</h3>\n<p>There are three ways to make functions more dynamic in bash. The first being, passing function names as parameters to other function, the second being using the source, and the third using the function as a router to subcommands.</p>\n<p>The first requires that a function be declared beforehand unless used with the second way.</p>\n<p>The second way requires file I/O. It may be used to implement dynamic function name assignment in bash.</p>\n<h4 id=\"the-first-way-pass-a-function-name-as-a-parameter\"><a href=\"#the-first-way-pass-a-function-name-as-a-parameter\" aria-label=\"the first way pass a function name as a parameter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>the first way: pass a function name as a parameter</h4>\n<p>I know what you are thinking, wouldn't it be nice to declare functions on the fly. Yes, it would but I would argue dynamic functions is something else and good enough. Don't get me wrong, I've been there.</p>\n<p>Your program, bash script, may contain a few function pre-defined with meaningful names; or it may contain hundreds or even thousands. Every function is there for a reason, each with the potential to be called. That is your function universe.</p>\n<p>Let there be an instance in your function universe that a function holds a reference, variable, holding the name of another function in the universe or itself. </p>\n<p>Apply static analysis and fail. That is your dynamic function.</p>\n<p>In more concrete terms, we may have real functions as follows.</p>\n<p>A dynamic function able to call any function in the universe</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dynamic-<span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token punctuation\">{</span> <span class=\"token builtin class-name\">local</span> function_name <span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">function_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${1}</span>\"</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token variable\">${function_name}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A dynamic function able to call any descendent function in the universe</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dynamic-<span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token punctuation\">{</span> <span class=\"token builtin class-name\">local</span> function_name <span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">function_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${1}</span>\"</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token variable\">${FUNCNAME}</span>-<span class=\"token variable\">${function_name}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A dynamic function able to call any function of a class in the universe</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dynamic-<span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token punctuation\">{</span> <span class=\"token builtin class-name\">local</span> function_name <span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">function_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${1}</span>\"</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  class-name-<span class=\"token variable\">${function_name}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you are looking for dynamic function, see <a href=\"https://github.com/temptemp3/sh2/blob/master/attr.sh\">attr.sh</a>. get_ and set_ functions are generated on the fly whenever attr is called.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> <span class=\"token variable\">${SH2}</span>/attr.sh\nattr x\nattr y\nattr z\nset_x <span class=\"token number\">1</span>\nset_y <span class=\"token variable\"><span class=\"token variable\">$((</span> $<span class=\"token punctuation\">(</span> get_x <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token variable\">))</span></span>\nset_z <span class=\"token variable\"><span class=\"token variable\">$((</span> $<span class=\"token punctuation\">(</span> get_y <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token variable\">))</span></span>\nget_x <span class=\"token comment\"># 1</span>\nget_y <span class=\"token comment\"># 2 </span>\nget_z <span class=\"token comment\"># 3</span></code></pre></div>\n<h4 id=\"the-second-way-write-a-function-to-file-and-source\"><a href=\"#the-second-way-write-a-function-to-file-and-source\" aria-label=\"the second way write a function to file and source permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>the second way: write a function to file and source</h4>\n<p>This method to implement dynamic functions is the same as employed in attr.sh (above). However, it may be viewed in general as writing a function to a file then sourcing. After all, that is what we do.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\">## test-dynamic-function-second</span>\n<span class=\"token comment\">## version 0.0.1 - initial</span>\n<span class=\"token comment\">##################################################</span>\ntest-dynamic-function-<span class=\"token function-name function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> temp\n  <span class=\"token assign-left variable\">temp</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span> mktemp <span class=\"token variable\">)</span></span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">></span> <span class=\"token variable\">${temp}</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\n<span class=\"token variable\">${function_name}</span>() {\n  echo \\<span class=\"token variable\">${FUNCNAME}</span>\n}\nEOF</span>\n  <span class=\"token builtin class-name\">.</span> <span class=\"token variable\">${temp}</span>\n  <span class=\"token builtin class-name\">declare</span> -pf <span class=\"token variable\">${function_name}</span>\n  <span class=\"token variable\">${function_name}</span>\n  <span class=\"token function\">rm</span> -v <span class=\"token variable\">${temp}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">##################################################</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>}</span> -eq <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">then</span>\n <span class=\"token assign-left variable\">function_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${1}</span>\"</span>\n<span class=\"token keyword\">else</span>\n <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span> <span class=\"token comment\"># wrong args</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token comment\">##################################################</span>\ntest-dynamic-function-second\n<span class=\"token comment\">##################################################</span>\n<span class=\"token comment\">## generated by create-stub2.sh v0.1.2</span>\n<span class=\"token comment\">## on Sun, 07 Jul 2019 10:56:38 +0900</span>\n<span class=\"token comment\">## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;</span>\n<span class=\"token comment\">##################################################</span></code></pre></div>\n<p>Source: <a href=\"https://github.com/temptemp3/ba.sh/blob/master/test-dynamic-function-second.sh\">test-dynamic-function-second.sh</a></p>\n<h4 id=\"the-third-way-use-function-as-a-router\"><a href=\"#the-third-way-use-function-as-a-router\" aria-label=\"the third way use function as a router permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>the third way: use function as a router</h4>\n<p>In this way, we use the function as a router such that the first argument indicates a subcommand and the rest its arguments. You can see how dynamic things can get considering the number of possible subcommands is infinite, or at least until you run out of disk space.</p>\n<h3 id=\"setup-functions\"><a href=\"#setup-functions\" aria-label=\"setup functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setup functions</h3>\n<p>One thing you may want to do in bash is set a variable from a function. The variable may have global scope or nearest local scope. The following example shows how a setup function would work using local scope to declare a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">shopt</span> -s expand_aliases\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">bind</span><span class=\"token operator\">=</span><span class=\"token string\">'\n{\n  local account_name\n  local account_type\n  local account_balance\n}\n'</span>\nsetup-<span class=\"token function-name function\">acount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token assign-left variable\">acount_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"Joe Doe\"</span> <span class=\"token comment\"># fictitious name</span>\n  <span class=\"token assign-left variable\">acount_acount</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\"># buck</span>\n  <span class=\"token assign-left variable\">acount_type</span><span class=\"token operator\">=</span>savings <span class=\"token comment\"># account</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-name function\">bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  bind-account\n  setup-account\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"wrapper-functions\"><a href=\"#wrapper-functions\" aria-label=\"wrapper functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>wrapper functions</h3>\n<p>In case you would like to add context to function within the scope of your bash script, wrapper function eliminates unnecessary repetition in your code and put all the trivial things inside the wrapper so that you can focus on getting things done when developing a program.</p>\n<h4 id=\"cli-wrapper-functions\"><a href=\"#cli-wrapper-functions\" aria-label=\"cli wrapper functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cli wrapper functions</h4>\n<p>CLIs often come with an extensive list of options and subcommands, which make them a good use case for wrapper functions. Once you know what you need, put it in a wrapper function.</p>\n<h5 id=\"aws-cli-wrapper-functions\"><a href=\"#aws-cli-wrapper-functions\" aria-label=\"aws cli wrapper functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>aws cli wrapper functions</h5>\n<p>CLIs come with a hoard of options and subcommands. The AWS-CLI is no different. Here is an example wrapper function for enabling metrics collection in auto scaling groups.</p>\n<ul>\n<li><a href=\"https://temptemp3.github.io/aws-autoscaling-enable-metrics-collection-for-asg.html#aws-cli-example\">aws-cli wrapper function to enable metrics collection in an auto scaling group</a></li>\n</ul>\n<h3 id=\"lazyload-function\"><a href=\"#lazyload-function\" aria-label=\"lazyload function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lazyload function</h3>\n<p>There may be a time when you want to lazyload functions in bash. That means to only source function code when relevant.</p>\n<p>Suppose that your big script with hundreds of lines called <u>foo.sh</u>. It happens.</p>\n<p><strong>foo.sh</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> <span class=\"token variable\">${SH2}</span>/aliases/commands.sh\nfoo-bar-<span class=\"token function-name function\">3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\nfoo-bar-<span class=\"token function-name function\">2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\nfoo-bar-<span class=\"token function-name function\">1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\nfoo-<span class=\"token function-name function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  commands\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-name function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  commands\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>}</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">then</span>\n <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">else</span>\n <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span> <span class=\"token comment\"># wrong args</span>\n<span class=\"token keyword\">fi</span>\nfoo</code></pre></div>\n<p>We want to make foo-bar and its dependents lazy load. That is unless the first argument provided by the user happens to be bar, functions beginning with foo-bar are not sourced.</p>\n<p>First, put foo-bar functions in another file like so.</p>\n<p><strong>foo-bar.sh</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">foo-bar-<span class=\"token function-name function\">3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\nfoo-bar-<span class=\"token function-name function\">2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\nfoo-bar-<span class=\"token function-name function\">1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\nfoo-<span class=\"token function-name function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  commands\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you see I just made a copy of foo.sh and filtered out everything that isn't foo-bar.</p>\n<p>Next, replace foo-bar functions with code to lazyload foo-bar.</p>\n<p><strong>foo.sh</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> <span class=\"token variable\">${SH2}</span>/aliases/commands.sh\nfoo-<span class=\"token function-name function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token builtin class-name\">.</span> foo-bar.sh <span class=\"token punctuation\">;</span> <span class=\"token variable\">${FUNCNAME}</span> <span class=\"token variable\">${@}</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> \n<span class=\"token function-name function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  commands\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>}</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">then</span>\n <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">else</span>\n <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span> <span class=\"token comment\"># wrong args</span>\n<span class=\"token keyword\">fi</span>\nfoo</code></pre></div>\n<h3 id=\"export-function\"><a href=\"#export-function\" aria-label=\"export function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>export function</h3>\n<p>No life exists outside the shell. In the beginning, there was nothing but an abyss. Lines were read from beyond the tilde in the background. Then, after 4 billion cycles glyphic light filled the foreground. And then there was bash.</p>\n<p>Export functions provide a means to include functional code, functions, within another shell that is not a subshell.</p>\n<p>Meet <a href=\"https://github.com/temptemp3/ba.sh/blob/master/true.sh\">true.sh</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> -v true.sh\n<span class=\"token builtin class-name\">declare</span> -f <span class=\"token boolean\">true</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>/dev/null <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-name function\">true</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token builtin class-name\">command</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>}</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">then</span>\n <span class=\"token builtin class-name\">command</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">else</span>\n <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span> <span class=\"token comment\"># wrong args</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">(</span> <span class=\"token builtin class-name\">.</span> true.sh <span class=\"token punctuation\">)</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${?}</span> <span class=\"token comment\"># 0</span>\n<span class=\"token function\">bash</span> true.sh\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${?}</span> <span class=\"token comment\"># 0</span></code></pre></div>\n<p>true.sh is a simple bash script that may be changed a export function.</p>\n<p>In our shell, we declare a function also called true.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">true</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span> <span class=\"token builtin class-name\">.</span> true.sh <span class=\"token punctuation\">)</span> <span class=\"token comment\"># true</span>\n<span class=\"token function\">bash</span> true.sh  <span class=\"token comment\"># </span>\n<span class=\"token builtin class-name\">declare</span> -fx <span class=\"token boolean\">true</span>\n<span class=\"token function\">bash</span> -v true.sh <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>/dev/null \n<span class=\"token function-name function\">true</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token builtin class-name\">echo</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin class-name\">declare</span> -f <span class=\"token boolean\">true</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>/dev/null <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-name function\">true</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token builtin class-name\">command</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>}</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n <span class=\"token builtin class-name\">command</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">else</span>\n <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span> <span class=\"token comment\"># wrong args</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">(</span> <span class=\"token builtin class-name\">.</span> true.sh <span class=\"token punctuation\">)</span> <span class=\"token comment\"># true</span>\n<span class=\"token function\">bash</span> true.sh <span class=\"token comment\"># true</span></code></pre></div>\n<p>For our true to be used in true.sh as a separate shell, the export attribute needs to be added to true. This is done using <span class=\"w3-codespan\">declare -xf NAME</span> or another bash <a href=\"builtins.html\">builtins</a>. See also <a href=\"declare.html\">bash declare</a></p>\n<pre><code>true() {\n  echo true\n}\n( . true.sh ) # true\nbash true.sh  # \ndeclare -fx true\n( . true.sh ) # true\nbash true.sh  # true\n</code></pre>\n<h3 id=\"oop-functions\"><a href=\"#oop-functions\" aria-label=\"oop functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>oop functions</h3>\n<p>One thing that may be missing in bash is builtin support for object-oriented programming concepts such as parent/child relationships. However, in practice, you can get away with such relationships, at least I have.</p>\n<p>A parent is any function that can call another function, one of its children, using the <span class=\"w3-codespan\">${FUNCNAME}</span> special variable. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\"># parent function</span>\n  <span class=\"token variable\">${FUNCNAME}</span>-child\n<span class=\"token punctuation\">}</span>\nparent-<span class=\"token function-name function\">child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\"># child function</span>\n  <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"nested-functions\"><a href=\"#nested-functions\" aria-label=\"nested functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nested functions</h3>\n<p>There are times when you need nested functions in bash such as when implementing once functions. Simply nest a function definition within another. It's that simple. Nesting functions come in handy when implementing devices such as classes for object-oriented programming.</p>\n<h4 id=\"example-nested-function\"><a href=\"#example-nested-function\" aria-label=\"example nested function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>example: nested function</h4>\n<p>bash function in function example</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-name function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\"># nested function</span>\n    <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  inner\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"once-functions\"><a href=\"#once-functions\" aria-label=\"once functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>once functions</h3>\n<p>Suppose that we need a function that only runs the first time it is called, i.e. we need a once function. See how it is done in bash.</p>\n<p>Commands</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token function-name function\">once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${FUNCNAME}</span>\n<span class=\"token punctuation\">}</span>\ntest-<span class=\"token function-name function\">once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  once\n  once\n  once\n<span class=\"token punctuation\">}</span>\ntest-once</code></pre></div>\n<p>Source: <a href=\"https://github.com/temptemp3/ba.sh/blob/master/test-once.sh\">test-once.sh</a></p>\n<p>Output</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">once</code></pre></div>\n<h3 id=\"echo-function\"><a href=\"#echo-function\" aria-label=\"echo function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>echo function</h3>\n<p>Let an echo function be any function containing 1 or more echo commands. In case no output is produced by the function, the result may be interpreted as failure. Additionally, an echo function may be a function or an alias named echo.</p>\n<p>Pseudocommands</p>\n<pre><code>echo-function() {\n  # some code ...\n  echo ${some_variable}\n}\necho-function ${some_arguments}\n</code></pre>\n<p>Pseudo-output</p>\n<pre><code>some output\n</code></pre>\n<h3 id=\"anonymous-functions\"><a href=\"#anonymous-functions\" aria-label=\"anonymous functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>anonymous functions</h3>\n<p>In bash, the closest you are going to get to anonymous is good enough. Here is what I mean. If that is not good enough, then I don't know what is.</p>\n<pre><code>#!/bin/bash\n## test-anonymous-function\n## version 0.0.1 - initial\n##################################################\nanonymous() {\n  _() {\n    true\n  }\n}\ntest-anonymous-function() {\n  _() { { anonymous ; }\n    echo anonymous functions are:\n    echo - may be nested\n    echo - short\n    echo - may use positional parameters\n    echo - may be once\n  }\n  _\n  _\n}\n##################################################\nif [ ${#} -eq 0 ] \nthen\n true\nelse\n exit 1 # wrong args\nfi\n##################################################\ntest-anonymous-function\n##################################################\n## generated by create-stub2.sh v0.1.2\n## on Sun, 07 Jul 2019 11:32:14 +0900\n## see &lt;https://github.com/temptemp3/sh2&gt;\n##################################################\n</code></pre>\n<p>Source: <a href=\"https://github.com/temptemp3/ba.sh/blob/master/test-anonymous-function.sh\">test-anonymous-function.sh</a></p>\n<h3 id=\"exit-functions\"><a href=\"#exit-functions\" aria-label=\"exit functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>exit functions</h3>\n<p>Exit functions extend the builtin exit command. In a script, it may be used to execute cleanup and logging routines. An example of how to override the exit command follows.</p>\n<p>Script</p>\n<pre><code>#!/bin/bash\n## test-function-exit\n## version 0.0.1 - initial\n##################################################\nset -e # errexit\ntrap exit EXIT\nexit() {\n  builtin exit ${?}\n}\ntest-function-exit() {\n  echo noise\n  ( return 0 )\n  echo silence\n}\n##################################################\nif [ ${#} -eq 0 ] \nthen\n true\nelse\n exit 1 # wrong args\nfi\n##################################################\ntest-function-exit\n##################################################\n## generated by create-stub2.sh v0.1.2\n## on Mon, 08 Jul 2019 19:50:33 +0900\n## see &lt;https://github.com/temptemp3/sh2&gt;\n##################################################\n</code></pre>\n<p>Source: <a href=\"https://github.com/temptemp3/ba.sh/blob/master/test-function-exit.sh\">test-function-exit.sh</a></p>\n<p>Command line</p>\n<pre><code>bash test-function-exit.sh\n</code></pre>\n<p>Output</p>\n<pre><code>noise\n</code></pre>\n<h3 id=\"read-functions\"><a href=\"#read-functions\" aria-label=\"read functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>read functions</h3>\n<p>read functions:</p>\n<ul>\n<li>\n<p>use read builtin command</p>\n<ul>\n<li>read from standard input</li>\n</ul>\n</li>\n<li>may be recursive</li>\n<li>may use positional parameters</li>\n</ul>\n<h3 id=\"recursive-functions\"><a href=\"#recursive-functions\" aria-label=\"recursive functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>recursive functions</h3>\n<p>Recursive functions call themselves. </p>\n<p>Here is an example of a simple recursive function in bash called fun.</p>\n<pre><code>fun() { # recursive function\n  test ! \"${once}\" || { true ; return ; }\n  once=\"true\"\n  fun\n}\n</code></pre>\n<p>Note that we can also use the special variable <span class=\"w3-codespan\">${FUNCNAME}</span> in place of the function name on recursive function call lines to (in my opinion) to improve readability as follows.</p>\n<pre><code>fun() { # recursive function\n  test ! \"${once}\" || { true ; return ; }\n  once=\"true\"\n  ${FUNCNAME}\n}\n</code></pre>\n<h4 id=\"local-variables-in-recursive-functions\"><a href=\"#local-variables-in-recursive-functions\" aria-label=\"local variables in recursive functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>local variables in recursive functions</h4>\n<p>In general, you should limit the scope of a variable to the function it is intended to be used in. This is especially, true in recursive functions. Neglecting variable scope in recursive functions could produce unexpected behavior at runtime due to side effects.</p>\n<pre><code>#!/bin/bash\n## test-function-recursive\n## version 0.0.1 - initial\n##################################################\nfun() { # recursive function\n  test \"${max_fun}\"\t|| local -i max_fun_level=255\n  test \"${fun_level}\"\t|| local -i fun_level=1\n  test ! ${fun_level} -gt ${max_fun_level} || { echo \"\" ; return ; }\n  echo -n \"${fun_level} \"\n  fun_level+=1\n  ${FUNCNAME}\n}\ntest-function-recursive() {\n  fun\n}\n##################################################\nif [ ${#} -eq 0 ] \nthen\n true\nelse\n exit 1 # wrong args\nfi\n##################################################\ntest-function-recursive\n##################################################\n## generated by create-stub2.sh v0.1.2\n## on Sun, 28 Jul 2019 21:32:36 +0900\n## see &lt;https://github.com/temptemp3/sh2&gt;\n##################################################\n</code></pre>\n<h3 id=\"map-functions\"><a href=\"#map-functions\" aria-label=\"map functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map functions</h3>\n<p>Script</p>\n<pre><code>#!/bin/bash\n## test-map-functions\n## version 0.0.1 - initial\n##################################################\nsquare() { { local -i n ; n=${1} ; }\n  echo $(( n * n ))\n}\nmap() { { local function_name ; function_name=\"${1}\" ;  }\n  local car cdr\n  read -t 1 car cdr\n  test \"${car}\" || { true ; return ; }\n  ${function_name} ${car} \n  echo ${cdr} | ${FUNCNAME} ${function_name}\n}\ntest-map-functions() {\n  seq 10 | xargs | map square\n}\n##################################################\nif [ ${#} -eq 0 ] \nthen\n true\nelse\n exit 1 # wrong args\nfi\n##################################################\ntime test-map-functions\n##################################################\n## generated by create-stub2.sh v0.1.2\n## on Sat, 27 Jul 2019 21:13:45 +0900\n## see &lt;https://github.com/temptemp3/sh2&gt;\n##################################################\n</code></pre>\n<p>Source: <a href=\"https://github.com/temptemp3/ba.sh/blob/master/test-map-functions.sh\">test-map-functions.sh</a></p>\n<p>Commands</p>\n<pre><code>bash test-map-functions.sh\n</code></pre>\n<p>Output</p>\n<pre><code>1\n4\n9\n16\n25\n36\n49\n64\n81\n100\n</code></pre>\n<hr>\n<h2 id=\"function-variables\"><a href=\"#function-variables\" aria-label=\"function variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function variables</h2>\n<ul>\n<li>local variables *</li>\n<li>global variables *</li>\n<li>positional parameters *</li>\n<li>special variables</li>\n</ul>\n<h3 id=\"local-variables\"><a href=\"#local-variables\" aria-label=\"local variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>local variables</h3>\n<p>In bash, all variables defined within functions are global by default. The bash builtin <span class=\"w3-codespan\">local</span> may be used within a function to declare a NAME as a variable with local scope.</p>\n<p>Variable scope is relative to location declared in the script and presence of keywords used such as <a href=\"declare.html\">declare</a>, <a href=\"local.html\">local</a>, or global. That is, not all variables declared outside a variable are necessarily global. A variable may be local to caller function and global to the function being called but not global to the script.</p>\n<p>If NAME is a global or has otherwise been declared outside of the function, the value assigned to NAME is effectively unset if local is present.  </p>\n<p>If NAME is not a global and has not been declared outside the function, NAME inherits the local attribute. </p>\n<h4 id=\"example-local-and-global-variables-in-functions\"><a href=\"#example-local-and-global-variables-in-functions\" aria-label=\"example local and global variables in functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>example: local and global variables in functions</h4>\n<pre><code>##\n## case NAME is global and unset in function by local\n##\n_() { \n  echo ${return}\n  local return\n  echo ${return}\n}\nreturn=1\n_\necho ${return}\n# 1\n#\n#\nunset return\nunset -f _\n##\n## case NAME is local and set in function\n##\n_() {\n  echo ${return}\n  return=2\n  echo ${return}\n}\n_\necho ${return}\n# \n# 2\n# \nunset return\nunset -f _\n##\n## case NAME is global and set in function without local\n##\n_() {\n  echo ${return}\n  return=4\n  echo ${return}\n}\nreturn=3\n_\necho ${return}\n# 3\n# 4\n# 4\nunset return\nunset -f _\n##\n## case NAME is global and set in function with local\n##\n_() {\n  echo ${return}\n  local return=5\n  echo ${return}\n}\nreturn=6\n_\necho ${return}\n# 6\n# 5\n# 6\n</code></pre>\n<h3 id=\"global-variables\"><a href=\"#global-variables\" aria-label=\"global variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>global variables</h3>\n<p>All variables in bash are global unless set inside a function with the <span class=\"w3-codespan\">local</span> command. Global variables may be referenced when a local variable exists sharing the same NAME using <span class=\"w3-codespan\">declare -g</span> to set a global variable from inside a function as follows.</p>\n<p>Script</p>\n<pre><code>#!/bin/bash\n## test-function-global-variables\n## version 0.0.1 - initial\n##################################################\nbar=0\ntest-function-global-variables() {\n  local bar=1\n  declare -g bar=2\n  echo ${bar}\n}\n##################################################\nif [ ${#} -eq 0 ] \nthen\n true\nelse\n exit 1 # wrong args\nfi\n##################################################\ntest-function-global-variables\necho ${bar}\n##################################################\n## generated by create-stub2.sh v0.1.2\n## on Fri, 19 Jul 2019 20:52:09 +0900\n## see &lt;https://github.com/temptemp3/sh2&gt;\n##################################################\n</code></pre>\n<p>Source: <a href=\"https://github.com/temptemp3/ba.sh/blob/master/test-function-global-variables.sh\">test-function-global-variables.sh</a></p>\n<p>Commands</p>\n<pre><code>bash test-function-global-variables.sh\n</code></pre>\n<p>Output</p>\n<pre><code>1\n2\n</code></pre>\n<h3 id=\"positional-parameters\"><a href=\"#positional-parameters\" aria-label=\"positional parameters permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>positional parameters</h3>\n<p>When a function is called its arguments are automatically assigned to positional parameters based on order appearing after the function name. <span class=\"w3-codespan\">${1}</span> <span class=\"w3-codespan\">${2}</span> <span class=\"w3-codespan\">...</span> are positional parameters. <span class=\"w3-codespan\">${#}</span> holds the number of positional parameters available. For example, if <span class=\"w3-codespan\">${#}</span> is 9, then the last assigned positional parameter is <span class=\"w3-codespan\">${9}</span>. </p>\n<p>Script</p>\n<pre><code>#!/bin/bash\n## test-function-positional-parameter-count\n## version 0.0.1 - initial\n##################################################\nfunc() {\n  echo There are ${#} positional parameter$( test ! ${#} -gt 1 || echo s )\n  for i in $( seq ${#} )\n  do\n  echo \\${${i}} is ${@:i:1}\n  done\n}\ntest-function-positional-parameter-count() {\n  func $( seq $(( RANDOM % 100 )) | sort --random-sort )\n}\n##################################################\nif [ ${#} -eq 0 ] \nthen\n true\nelse\n exit 1 # wrong args\nfi\n##################################################\ntest-function-positional-parameter-count\n##################################################\n## generated by create-stub2.sh v0.1.2\n## on Sun, 21 Jul 2019 20:37:44 +0900\n## see &lt;https://github.com/temptemp3/sh2&gt;\n##################################################\n</code></pre>\n<p>Source: <a href=\"https://github.com/temptemp3/ba.sh/blob/master/test-function-positional-parameter-count.sh\">test-function-positional-parameter-count.sh</a></p>\n<p>Commands</p>\n<pre><code>bash test-function-positional-parameter-count.sh\n</code></pre>\n<p>Output</p>\n<pre><code>There are 3 positional parameters\n${1} is 2\n${2} is 1\n${3} is 3\n</code></pre>\n<hr>\n<h2 id=\"function-operations\"><a href=\"#function-operations\" aria-label=\"function operations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function operations</h2>\n<ul>\n<li>declare function *</li>\n<li>get function name *</li>\n<li>list functions *</li>\n<li>function return *</li>\n<li>function exit *</li>\n<li>calling functions *</li>\n</ul>\n<h3 id=\"declare-function\"><a href=\"#declare-function\" aria-label=\"declare function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>declare function</h3>\n<p>There are essentially two ways to create functions in bash that do not use the <a href=\"declare.html\">declare</a> bash builtin.</p>\n<p>1st method</p>\n<p>In this method to make functions in bash, you can use the function keyword followed by the name and command list.</p>\n<pre><code>function NAME { COMMANDS ; }</code></pre>\n<p>2nd method</p>\n<p>In this method to make bash functions, you would omit the function keyword. It is okay.</p>\n<pre><code>NAME { COMMANDS ; }</code></pre>\n<p>Coincidentally, we may declare a function outside of a script using bash history as follows.</p>\n<pre><code>{ COMMAND ; }\nNAME () !!\n</code></pre>\n<p>However, if you that is too much, I recommend using 1 of the 2 methods prescribed above. By the way, I generally steer towards the 2nd method.</p>\n<h3 id=\"get-function-name\"><a href=\"#get-function-name\" aria-label=\"get function name permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>get function name</h3>\n<p>To get a function name inside a function, use the <span class=\"w3-codespan\">${FUNCNAME}</span> special variable.</p>\n<h3 id=\"list-functions\"><a href=\"#list-functions\" aria-label=\"list functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>list functions</h3>\n<p>There are two ways to list all bash function using the <span class=\"w3-codespan\">declare</span> command. </p>\n<p>To list function names in bash, use the <span class=\"w3-codespan\">declare -F</span> bash builtin command. </p>\n<p>To list function names along with the body, use the <span class=\"w3-codespan\">declare -f</span> bash builtin command.</p>\n<h3 id=\"function-return\"><a href=\"#function-return\" aria-label=\"function return permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function return</h3>\n<p>At any point within a function, it may return control to its caller on the return command. </p>\n<p>Function</p>\n<pre><code>fun() {\n  return\n  code never been touched\n}\n</code></pre>\n<p>The return command takes an argument between 0 and 255 to be returned instead of the return value of the last command executed. </p>\n<pre><code>help return\nreturn: return [n]\n    Return from a shell function.\n\n    Causes a function or sourced script to exit with the return value\n    specified by N.  If N is omitted, the return status is that of the\n    last command executed within the function or script.\n\n    Exit Status:\n    Returns N, or failure if the shell is not executing a function or script.\n</code></pre>\n<p>A function returns automatically after the last command returning the exit code of the last command. </p>\n<p>Commands</p>\n<pre><code>more-fun() {\n  false\n}\nmore-fun\necho ${?}\n</code></pre>\n<p>Output</p>\n<pre><code>1\n</code></pre>\n<h3 id=\"function-exit\"><a href=\"#function-exit\" aria-label=\"function exit permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function exit</h3>\n<p>A function may return control to the caller of the function, exit the function, using the bash builtin <span class=\"w3-codespan\">return</span> command. Conversely, the <span class=\"w3-codespan\">exit</span> command will return control to the caller of the script.</p>\n<h3 id=\"calling-functions\"><a href=\"#calling-functions\" aria-label=\"calling functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>calling functions</h3>\n<p>There are two ways to call functions in bash; the first being statically by the function name or dynamically using variables.</p>\n<h4 id=\"the-first-way-static-function-call\"><a href=\"#the-first-way-static-function-call\" aria-label=\"the first way static function call permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>the first way: static function call</h4>\n<p>Suppose that we have a function called <span class=\"w3-codespan\">foo</span>. In interactive mode, we call it by typing its name end hitting enter. In the script, we list its name as a command and it is called during execution of the script.</p>\n<h4 id=\"the-second-way-dynamic-function-call\"><a href=\"#the-second-way-dynamic-function-call\" aria-label=\"the second way dynamic function call permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>the second way: dynamic function call</h4>\n<p>Function calls need not be explicit in bash. That is, a variable or output to command substitution may call a function. </p>\n<p>Remember in the first way, we have a function named <span class=\"w3-codespan\">foo</span>. In the second way, we have a variable named <span class=\"w3-codespan\">bar</span>. Suppose we set <span class=\"w3-codespan\">bar=\"foo\"</span>. In the script <span class=\"w3-codespan\">${bar}</span> calls <span class=\"w3-codespan\">foo</span>.</p>\n<p>Now suppose that we have two other functions called <span class=\"w3-codespan\">foo2</span> and <span class=\"w3-codespan\">foo3</span> and <span class=\"w3-codespan\">bar=1</span>. What does <span class=\"w3-codespan\">foo${bar}</span> call? You get the picture.</p>\n<p>See also <a href=\"functions.html#dynamic_functions\">dynamic functions</a></p>\n<hr>\n<h2 id=\"function-return-values\"><a href=\"#function-return-values\" aria-label=\"function return values permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function return values</h2>\n<p>When it comes to functions in bash, one topic that often comes is returning values.There are many different things that you may return from a function, return values, exit codes, or nothing at all.</p>\n<ul>\n<li>exit code *</li>\n<li>string *</li>\n<li>\n<p>arrays *</p>\n<ul>\n<li>associative array *</li>\n<li>indexed array *</li>\n</ul>\n</li>\n<li>side effects</li>\n<li>void </li>\n<li>void with side effects</li>\n</ul>\n<h3 id=\"exit-code\"><a href=\"#exit-code\" aria-label=\"exit code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>exit code</h3>\n<p>The exit code of the last command run inside the function is returned.</p>\n<p>Function that returns with a non-zero exit code</p>\n<pre><code>fun() { false ; }\nfun\necho ${?} # 1\n</code></pre>\n<p>Function that returns with an exit code of zero</p>\n<pre><code>fun() { true ; }\nfun\necho ${?} # 0\n</code></pre>\n<h3 id=\"string\"><a href=\"#string\" aria-label=\"string permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>string</h3>\n<p>Output (standard output and error) returned by the function.</p>\n<pre><code>fun() { echo string ; }\nvar return_value=$( fun )\necho ${return_value} # string\n</code></pre>\n<h3 id=\"arrays\"><a href=\"#arrays\" aria-label=\"arrays permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>arrays</h3>\n<p>It is possible to return an array from a function in bash. See the example showing how to return arrays from functions below.</p>\n<h4 id=\"associative-arrays\"><a href=\"#associative-arrays\" aria-label=\"associative arrays permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>associative arrays</h4>\n<p>It is possible to return an associative array from a function through standard output. Sanitizing the string representation of the array before instantiation is recommended. An example showing how to return associative arrays from functions follows.</p>\n<pre><code>#!/bin/bash\n## test-associative-arrays\n## version 0.0.1 - initial\n##################################################\n. ${SH2}/cecho.sh\nsanitize-assoc-array() { \n  grep -e '^declare\\s-A\\s[a-z_]*=(\\(\\[[^]]*.=\"[^\"]*.\\s\\)\\+)$' -o |\n  head -1\n}\ncreate-test-assoc-array() {\n  {\n    declare -A assoc_arr\n    assoc_arr['a']=1\n    assoc_arr['b']=2\n    assoc_arr['c']=3\n    declare -p assoc_arr\n  } | sanitize-assoc-array\n}\nmodify-test-assoc-array() {\n  assoc_arr['a']=1\n  assoc_arr['b']=2\n  assoc_arr['c']=3\n}\ntest-associative-arrays() {\n  cecho green \"testing associative arrays ...\"\n  cecho yellow \"test i\"\n  cecho yellow \"receive associative array returned by another function\"\n  cecho yellow \"and set name to hash\"\n  cecho yellow \"expect declare -A hash=([a]=\\\"1\\\" [b]=\\\"2\\\" [c]=\\\"3\\\" )\"\n  arr=$( create-test-assoc-array )\n  eval ${arr/assoc_arr/hash} # instantiate within function\n  declare -p hash\n  unset hash\n  cecho yellow \"test ii\"\n  cecho yellow \"receive associative array returned by another function\"\n  cecho yellow \"and use as is\"\n  cecho yellow \"expect declare -A hash=([a]=\\\"1\\\" [b]=\\\"2\\\" [c]=\\\"3\\\" )\"\n  eval $( create-test-assoc-array ) # instantiate within function\n  declare -p assoc_arr\n  unset assoc_arry\n  cecho yellow \"test iii\"\n  cecho yellow \"modify associative array in another function\"\n  cecho yellow \"expect declare -A hash=([a]=\\\"1\\\" [b]=\\\"2\\\" [c]=\\\"3\\\" )\"\n  declare -A assoc_arr\n  modify-test-assoc-array\n  declare -p assoc_arr\n  cecho green \"done testing associative arrays\"\n}\n##################################################\nif [ ${#} -eq 0 ] \nthen\n true\nelse\n exit 1 # wrong args\nfi\n##################################################\ntest-associative-arrays\n##################################################\n## generated by create-stub2.sh v0.1.2\n## on Sat, 06 Jul 2019 13:53:40 +0900\n## see &lt;https://github.com/temptemp3/sh2&gt;\n##################################################\n</code></pre>\n<p>Source: <a href=\"https://github.com/temptemp3/ba.sh/blob/master/test-associative-arrays.sh\">test-associative-arrays.sh</a></p>\n<h4 id=\"indexed-arrays\"><a href=\"#indexed-arrays\" aria-label=\"indexed arrays permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>indexed arrays</h4>\n<p>It is possible to return an indexed array from a shell function. Sanitizing the string representation of the array before instantiation is recommended. See the example showing how to return from functions above.</p>\n<hr>","tableOfContents":"<ul>\n<li><a href=\"/bash-functions/#function-help\">function help</a></li>\n<li><a href=\"/bash-functions/#function-types\">function types</a></li>\n<li><a href=\"/bash-functions/#function-variables\">function variables</a></li>\n<li><a href=\"/bash-functions/#function-operations\">function operations</a></li>\n<li><a href=\"/bash-functions/#function-return-values\">function return values</a></li>\n</ul>","timeToRead":19,"excerpt":"Read in 16 minutes Shell functions in bash allow you to name groups of commands to be run at a later time. Once named, command groups may be…","frontmatter":{"title":"Bash functions","cover":"https://unsplash.it/1152/300/?random?BirchintheRoses","date":"29/09/2029","category":"blog","tags":["bash","bash-functions"]},"fields":{"slug":"/bash-functions","date":"2029-09-19T15:00:00.000Z"}}},"pageContext":{"slug":"/bash-functions","nexttitle":"Bash declare","nextslug":"/bash-declare","prevtitle":"Bash declare integer","prevslug":"/bash-declare-integer"}}}