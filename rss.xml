<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[temp23]]></title><description><![CDATA[Articles written by Temptemp3]]></description><link>https://temptemp3.github.io</link><image><url>https://temptemp3.github.io/logos/logo-512.png</url><title>temp23</title><link>https://temptemp3.github.io</link></image><generator>GatsbyJS Advanced Starter</generator><lastBuildDate>Fri, 21 May 2021 00:12:05 GMT</lastBuildDate><atom:link href="https://temptemp3.github.io/rss.xml" rel="self" type="application/rss+xml"/><copyright><![CDATA[Copyright © 2019. temptemp3]]></copyright><item><title><![CDATA[Bash declare integer]]></title><description><![CDATA[Why declare integers? As you know, bash is not like most programming languages. One thing that makes it different is its type system; Unlike…]]></description><link>https://temptemp3.github.io/bash-declare-integer</link><guid isPermaLink="false">https://temptemp3.github.io/bash-declare-integer</guid><category><![CDATA[bash]]></category><category><![CDATA[bash-builtins]]></category><pubDate>Wed, 19 Sep 2029 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Why declare integers? As you know, bash is not like most programming languages. One thing that makes it different is its type system; Unlike static and dynamic typed languages, it allows you to switch type-specific behaviors on/off through variable attributes. Hence, you would declare an integer in bash to make the variable behave more like an integer.&lt;/p&gt;
&lt;p&gt;Previously in &lt;a href=&quot;bash-declare.html&quot;&gt;bash using declare&lt;/a&gt;, we covered all the uses for the bash builtin command declare. Here we focus on the usage for specifying integer variables in bash.&lt;/p&gt;
&lt;h2 id=&quot;declaring-integer-variables-in-bash&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#declaring-integer-variables-in-bash&quot; aria-label=&quot;declaring integer variables in bash permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Declaring integer variables in bash&lt;/h2&gt;
&lt;p&gt;As they say, &lt;em&gt;All is string&lt;/em&gt; in bash. However, if we hope to escape from characters and strings to use numbers, we may opt to restrict a variable to storing integers like 1 and -1. And in the case that the integer does not know what to do with the value it is being assigned, assign it to 0. To accomplish this in bash, we turn on the integer attribute for the variable using builtins &lt;code class=&quot;language-text&quot;&gt;declare&lt;/code&gt; builtin combined with &lt;code class=&quot;language-text&quot;&gt;-i&lt;/code&gt;. Makes sense, right? We can also use &lt;code class=&quot;language-text&quot;&gt;local&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt; in place of declare if we needed.&lt;/p&gt;
&lt;p&gt;Follows are examples of int variable assignment in action.&lt;/p&gt;
&lt;h3 id=&quot;example-assigning-int-value-without-quotes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-assigning-int-value-without-quotes&quot; aria-label=&quot;example assigning int value without quotes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Assigning int value without quotes&lt;/h3&gt;
&lt;p&gt;Assigning an int value without double-quotes would as expected assign a variable the numeric value of the unquoted string. That is, if the unquoted string equals 1, the variable would be assigned the value 1.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -i int
  &lt;span class=&quot;token comment&quot;&gt;## assign int value without quotes&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=1&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;example-assigning-int-value-with-quotes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-assigning-int-value-with-quotes&quot; aria-label=&quot;example assigning int value with quotes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Assigning int value with quotes&lt;/h3&gt;
&lt;p&gt;In the last example we assigned int the value of 1 as you would expect, without using quotes. It turns out that quotes do not affect assignment of integer variables in bash if the symbol on the right hand side begins with a digit. You will see later that this is not the case when the right hand side could be a variable name.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -i int
  &lt;span class=&quot;token comment&quot;&gt;## assign int value with quotes&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=2&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 2&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;example-assigning-int-value-a-string-matching-a-variable-name&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-assigning-int-value-a-string-matching-a-variable-name&quot; aria-label=&quot;example assigning int value a string matching a variable name permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Assigning int value a string matching a variable name&lt;/h3&gt;
&lt;p&gt;In the last two examples, we were doing the right thing, actually assigning an int variable a numberical value. What happens if we try to assign it the string two. You may be surprised what you find.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; var
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -i int
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=var&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 0&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;example-assigning-int-value-a-string-matching-a-variable-name-with-side-effects&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-assigning-int-value-a-string-matching-a-variable-name-with-side-effects&quot; aria-label=&quot;example assigning int value a string matching a variable name with side effects permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Assigning int value a string matching a variable name with side effects&lt;/h3&gt;
&lt;p&gt;In the last examples, we assigned in the name of a varaible and saw what happened. Now let&apos;s introduce side effects.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; var
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -i int
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable with side effects&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=var&quot;&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 0&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;((&lt;/span&gt; var&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;((&lt;/span&gt; var&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=var&quot;&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;example-the-rest-of-int-variable-assignment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-the-rest-of-int-variable-assignment&quot; aria-label=&quot;example the rest of int variable assignment permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: The rest of int variable assignment&lt;/h3&gt;
&lt;p&gt;It may take some time to split this variable assignment example script into few enough bytes to be easily processed by the reader. Until then, here is the rest of int variable assignment examples.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; var
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; empty_var
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -i int
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable w/ increment&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var+1
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=var+1&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 4&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable empty &lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;empty_var
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;empty_var&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 0&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable in quotes&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;var&quot;&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;var&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 3&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable random&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;RANDOM&quot;&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;RANDOM&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;int: &lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# maybe 1234&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;example-putting-int-variable-assignment-all-together&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-putting-int-variable-assignment-all-together&quot; aria-label=&quot;example putting int variable assignment all together permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Putting int variable assignment all together&lt;/h3&gt;
&lt;p&gt;Here is the demo script left so that you may see what examples above look like in the whole context of the script. Feel free to skip through as needed.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; var
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; empty_var
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -i int
  &lt;span class=&quot;token comment&quot;&gt;## assign int value without quote&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=1&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 1&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value with quote&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=2&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 2&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=var&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 0&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign other variable value to int&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;var=3&quot;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable again&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=var&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 3&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable w/ increment&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var+1
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=var+1&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 4&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable empty &lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;empty_var
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;empty_var&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 0&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable in quotes&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;var&quot;&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;var&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 3&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## assign int value of another variable random&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;RANDOM&quot;&lt;/span&gt;
  cecho green &lt;span class=&quot;token string&quot;&gt;&quot;int=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;RANDOM&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;
  cecho yellow &lt;span class=&quot;token string&quot;&gt;&quot;int: &lt;span class=&quot;token variable&quot;&gt;${int}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# maybe 1234&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/beard.sh/blob/bashboy/scripts/210513-run-example-001-bash-declare-intenger-assignment.sh&quot;&gt;210513-run-example-001-bash-declare-intenger-assignment.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is what you would expect to see if you were to run the script as bashboy.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bashboy run:example-001-bash-declare-intenger-assignment
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var 
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; 
&lt;span class=&quot;token assign-left variable&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var 
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;var+1 
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;empty_var&quot;&lt;/span&gt; 
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; 
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;var&quot;&lt;/span&gt; 
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;RANDOM&quot;&lt;/span&gt; 
int: &lt;span class=&quot;token number&quot;&gt;12839&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see there are some quirks to keep in mind when using the integer attibute in bash, especially in the case when assigning an alphanumeric string not begining with zero matching an existing variable name to an integer variable. However, it is possibly to prevent undefined behavior from occurring by paying attention to scope.&lt;/p&gt;
&lt;!-- here --&gt;
&lt;h2 id=&quot;usage&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#usage&quot; aria-label=&quot;usage permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Let&apos;s skip to the good part, creating integer variables!&lt;br&gt;
Here is how to declare an integer variable in bash. Note that &lt;code class=&quot;language-text&quot;&gt;int&lt;/code&gt; is not a keyword for integer. That is the job of the &lt;code class=&quot;language-text&quot;&gt;-i&lt;/code&gt; option to the builtin declare.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;determine if a variable is an integer *&lt;/li&gt;
&lt;li&gt;create an integer variable *&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;determine-if-a-variable-is-an-integer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#determine-if-a-variable-is-an-integer&quot; aria-label=&quot;determine if a variable is an integer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;determine if a variable is an integer&lt;/h3&gt;
&lt;p&gt;There is more than one way to determine if a variable is an integer or not but you could get away with checking if the variable has the -i attribute. After all, an integer variable holds integer values despite what you try to assign to it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# check if a variable is an integer&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -p int			&lt;span class=&quot;token comment&quot;&gt;# declare -i int=&quot;1&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We say a variable is an integer if the &lt;span class=&quot;w3-codespan&quot;&gt;-i&lt;/span&gt; attribute set, i.e. if &lt;span class=&quot;w3-codespan&quot;&gt;declare -p&lt;/span&gt; returns either &lt;span class=&quot;w3-codespan&quot;&gt;-i&lt;/span&gt; or &lt;span class=&quot;w3-codespan&quot;&gt;-ir&lt;/span&gt;. Note that in the case that the variable is found to have the &lt;span class=&quot;w3-codespan&quot;&gt;-n&lt;/span&gt; attribute set, testing the end nameref is required to determine if the variable is an integer.&lt;/p&gt;
&lt;h3 id=&quot;create-an-integer-variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#create-an-integer-variable&quot; aria-label=&quot;create an integer variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;create an integer variable&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# create an integer variable and modify through assignment&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;unset&lt;/span&gt; one			&lt;span class=&quot;token comment&quot;&gt;# just to be sure&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -i int		&lt;span class=&quot;token comment&quot;&gt;# int is an integer&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;				&lt;span class=&quot;token comment&quot;&gt;# int=$(( 5 ))=5&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 				&lt;span class=&quot;token comment&quot;&gt;# int=$(( int + 1 ))=6&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;int+1 			&lt;span class=&quot;token comment&quot;&gt;# int=$(( int + int + 1 ))=13&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;one				&lt;span class=&quot;token comment&quot;&gt;# int=$(( one ))=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now look at what happens without the integer attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# result of assignment without integer attribute
unset int			# just to be sure
unset one			# just to be sure
int=5				# int=5
int+=1 				# int=${int}1=51
int+=int+1 			# int=${int}+int+1=51int+1
int=one				# int=one
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you see what happens if you forget to declare a variable as an integer. Not something that you want running loose in your program.&lt;/p&gt;
&lt;h3 id=&quot;breakdown&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#breakdown&quot; aria-label=&quot;breakdown permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;breakdown&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;w3-codespan&quot;&gt;declare -i int&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We say that if there is a variable named int, it now has the integer attribute set. If the variable named in the declare command is not set yet, then the attribute is applied to a future variable unless &lt;span class=&quot;w3-codespan&quot;&gt;unset&lt;/span&gt;. Using &lt;span class=&quot;w3-codespan&quot;&gt;local&lt;/span&gt; instead of &lt;span class=&quot;w3-codespan&quot;&gt;declare&lt;/span&gt;, causes the attribute to only be applied in subsequent assignments in the local scope.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;w3-codespan&quot;&gt;int=5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Depending on whether the variable has the integer attribute this sets the value of int to the string 5 or arithmetic expansion of 5. In the case of 5, the result yields 5 for both cases.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;w3-codespan&quot;&gt;int+=1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Should increment int if integer attribute set.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;w3-codespan&quot;&gt;int+=int+1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Should double int and increment if integer attribute set.&lt;/p&gt;
&lt;h2 id=&quot;definitions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#definitions&quot; aria-label=&quot;definitions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;definitions&lt;/h2&gt;
&lt;p&gt;Definition of types of integer variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integer variable&lt;/li&gt;
&lt;li&gt;Read-only integer variable&lt;/li&gt;
&lt;li&gt;Pure integer variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;integer-variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#integer-variable&quot; aria-label=&quot;integer variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;integer variable&lt;/h3&gt;
&lt;p&gt;A variable with the &lt;span class=&quot;w3-codespan&quot;&gt;-i&lt;/span&gt; attribute set.&lt;/p&gt;
&lt;p&gt;We define an integer variable in bash as a variable with the integer attribute set. The question we ask here is, &quot;Is it valid to declare a variable with the integer attribute in combination with another attribute?&quot; This may be expanded later.&lt;/p&gt;
&lt;h3 id=&quot;read-only-integer-variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#read-only-integer-variable&quot; aria-label=&quot;read only integer variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;read-only integer variable&lt;/h3&gt;
&lt;p&gt;An integer variable with the &lt;span class=&quot;w3-codespan&quot;&gt;-r&lt;/span&gt; attribute set.&lt;/p&gt;
&lt;h3 id=&quot;pure-integer-variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#pure-integer-variable&quot; aria-label=&quot;pure integer variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;pure integer variable&lt;/h3&gt;
&lt;p&gt;A variable with only the &lt;span class=&quot;w3-codespan&quot;&gt;-i&lt;/span&gt; attribute set.&lt;/p&gt;
&lt;p&gt;We define a pure integer variable in bash as a variable with only the integer attribute set.&lt;/p&gt;
&lt;h2 id=&quot;motivation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#motivation&quot; aria-label=&quot;motivation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;motivation&lt;/h2&gt;
&lt;p&gt;You may be wondering why you would even bother declaring integer variables in bash. After all, aren&apos;t all variable strings? Yes exactly, but using declare to add the integer attribute to a variable affects assignment.&lt;/p&gt;
&lt;h3 id=&quot;why-declare-integers-in-bash&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-declare-integers-in-bash&quot; aria-label=&quot;why declare integers in bash permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why declare integers in bash?&lt;/h3&gt;
&lt;p&gt;To better understand how and why integers are declared in bash, it is helpful to look at behavior with and without using integer variables.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## test-bash-declare-integer-1&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## - fun with integers attributes&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## version 0.0.1 - initial&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;
test-bash-declare-integer-&lt;span class=&quot;token function-name function&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## setup&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; lonely_integer		&lt;span class=&quot;token comment&quot;&gt;# one int is fine&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; i			&lt;span class=&quot;token comment&quot;&gt;# for ease of use&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -n &lt;span class=&quot;token assign-left variable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;lonely_integer 	&lt;span class=&quot;token comment&quot;&gt;# declare attributes&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## (1) do something wrong with integers&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;asdf			&lt;span class=&quot;token comment&quot;&gt;# (1) asdf as i is asdf&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${i}&lt;/span&gt;			&lt;span class=&quot;token comment&quot;&gt;# (2) asdf&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## (2) what if we give it the integer attribute?&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -i lonely_integer	&lt;span class=&quot;token comment&quot;&gt;# (1) declare integer&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;asdf			&lt;span class=&quot;token comment&quot;&gt;# (2) asdf as i is 0&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${i}&lt;/span&gt;			&lt;span class=&quot;token comment&quot;&gt;# (3) 0&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## (3) what happened?&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; +i lonely_integer	&lt;span class=&quot;token comment&quot;&gt;# (1) revert back&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$((&lt;/span&gt; ${asdf} &lt;span class=&quot;token variable&quot;&gt;))&lt;/span&gt;&lt;/span&gt;		&lt;span class=&quot;token comment&quot;&gt;# (2) what happens in (2) under (1) conditions&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${i}&lt;/span&gt;			&lt;span class=&quot;token comment&quot;&gt;# (3) 0&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## (4) proof: part i (without integer attribute)&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;asdf&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;			&lt;span class=&quot;token comment&quot;&gt;# assignment for proof&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$((&lt;/span&gt; ${asdf} &lt;span class=&quot;token variable&quot;&gt;))&lt;/span&gt;&lt;/span&gt;		&lt;span class=&quot;token comment&quot;&gt;# same as (3.2)&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${i}&lt;/span&gt;			&lt;span class=&quot;token comment&quot;&gt;# 1&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;## (5) proof: part ii (with integer attribute)&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -i lonely_integer	&lt;span class=&quot;token comment&quot;&gt;# same as (2.1)&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;asdf			&lt;span class=&quot;token comment&quot;&gt;#  asdf as i is 1&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${i}&lt;/span&gt;			&lt;span class=&quot;token comment&quot;&gt;# 1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;}&lt;/span&gt; -eq &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
 &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
 &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# wrong args&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;
test-bash-declare-integer-1
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## generated by create-stub2.sh v0.1.1&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## on Sun, 03 Feb 2019 17:36:53 +0900&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## see &amp;amp;lt;https://github.com/temptemp3/sh2&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You see that adding the integer attribute forces arithmetic expressions to be evaluated on assignment.&lt;/p&gt;
&lt;h2 id=&quot;questions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#questions&quot; aria-label=&quot;questions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;questions&lt;/h2&gt;
&lt;p&gt;Here are a few quesrtions related to declaring integers in bash.&lt;/p&gt;
&lt;h3 id=&quot;how-do-i-compare-two-integers&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-i-compare-two-integers&quot; aria-label=&quot;how do i compare two integers permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;how do I compare two integers?&lt;/h3&gt;
&lt;p&gt;Arithmetic binary operators can be used to compare integers in bash in the form &lt;code class=&quot;language-text&quot;&gt;arg1 OP arg2&lt;/code&gt;. For example, we may test if two integers are not equal as follows.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${a}&lt;/span&gt; -eq &lt;span class=&quot;token variable&quot;&gt;${b}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# a != b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the variable a and b are attributed with the integer attribute, then nothing unexpected should happen. However, if a or b are not attributed with the integer attribute, then an error may occur as follows.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c d&quot;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;e&quot;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${a}&lt;/span&gt; -eq &lt;span class=&quot;token variable&quot;&gt;${b}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#bash: test: too many arguments&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${?}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 2&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; -v -x 
&lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${a}&lt;/span&gt; -eq &lt;span class=&quot;token variable&quot;&gt;${b}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#+ test a d -eq c &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#bash: test: too many arguments&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;how-do-i-declare-an-integer-bash&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-i-declare-an-integer-bash&quot; aria-label=&quot;how do i declare an integer bash permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;how do I declare an integer bash?&lt;/h3&gt;
&lt;p&gt;Declare integer variables using the declare builtin with the -i option.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -i myint&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;how-do-i-declare-a-local-integer-in-bash&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-i-declare-a-local-integer-in-bash&quot; aria-label=&quot;how do i declare a local integer in bash permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;how do I declare a local integer in bash?&lt;/h3&gt;
&lt;p&gt;Declare integer variables with local bindings using declare in conjunction with the local (1). In the shortest form, the operation may be performed in a single statement (2) consisting of local, the integer attribute option -i, and variable name.&lt;/p&gt;
&lt;p&gt;(1), separate local binding and integer attribute assignment&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; myint
&lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -i myint&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or (2), local binding with integer attribute set&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -i myint&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Either way works.&lt;/p&gt;</content:encoded><author></author></item><item><title><![CDATA[Bash declare]]></title><description><![CDATA[Most programmers can get by without knowing about declare in bash. Good thing we aren't most programmers. The leverage you get out of using…]]></description><link>https://temptemp3.github.io/bash-declare</link><guid isPermaLink="false">https://temptemp3.github.io/bash-declare</guid><category><![CDATA[bash]]></category><category><![CDATA[bash-builtins]]></category><pubDate>Wed, 19 Sep 2029 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Most programmers can get by without knowing about declare in bash. Good thing we aren&apos;t most programmers. The leverage you get out of using declare and variable attributes is huge. It goes way beyond creating arrays and integer variables.&lt;/p&gt;
&lt;h2 id=&quot;using-declare&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#using-declare&quot; aria-label=&quot;using declare permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using declare&lt;/h2&gt;
&lt;p&gt;One thing you learn later in bash is to use certain builtin commands. Declare in bash is no exception. Here we cover how to use the builtin declare to modify the attributes of bash variables allowing you to create of arrays, list functions, integers, and much more.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt; -c &lt;span class=&quot;token string&quot;&gt;&quot;help declare&quot;&lt;/span&gt;
declare: &lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-aAfFgilnrtux&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-p&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    Set variable values and attributes.

    Declare variables and give them attributes.  If no NAMEs are given,
    display the attributes and values of all variables.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Options:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Declare takes &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-aAfFgilnrtux&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-p&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; as options. 

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-aAfFgilnrtux&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; affects attribute assignment.

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-p&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; affects display of attributes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Options for functions:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;  -f        restrict action or display to &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; names and definitions

  -F        restrict display to &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; names only &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;plus line number and
                &lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; when debugging&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Option to list bash variable attributes:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;  -p        display the attributes and value of each NAME&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you need to get variable attributes in bash &lt;code class=&quot;language-text&quot;&gt;declare -p variable_name&lt;/code&gt; comes in handy. The &lt;code class=&quot;language-text&quot;&gt;-p&lt;/code&gt; option can be used to exclude functions from output. Additionally, the effect of the -p option is canceled out when combined with either the &lt;code class=&quot;language-text&quot;&gt;-f&lt;/code&gt; option to include functions or the &lt;code class=&quot;language-text&quot;&gt;-F&lt;/code&gt; option to include only function names.&lt;/p&gt;
&lt;p&gt;Options which set attributes:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;w3-codespan&quot;&gt;-&lt;a href=&quot;declare.html#indexed_arrays&quot;&gt;a&lt;/a&gt; to make NAMEs indexed arrays (if supported)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;w3-codespan&quot;&gt;-&lt;a href=&quot;declare.html#associative_arrays&quot;&gt;A&lt;/a&gt; to make NAMEs associative arrays (if supported)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;w3-codespan&quot;&gt;-&lt;a href=&quot;declare.html#integers&quot;&gt;i&lt;/a&gt; to make NAMEs have the &apos;integer&apos; attribute&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  -g        create global variables when used in a shell function; otherwise
            ignored

  -l        to convert NAMEs to lower case on assignment

  -n        make NAME a reference to the variable named by its value

  -r        to make NAMEs readonly

  -t        to make NAMEs have the `trace&amp;#39; attribute

  -u        to convert NAMEs to upper case on assignment

  -x        to make NAMEs export&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Using `+&apos; instead of `-&apos; turns off the given attribute.

    Variables with the integer attribute have arithmetic evaluation (see
    the `let&apos; command) performed when the variable is assigned a value.

    When used in a function, `declare&apos; makes NAMEs local, as with the `local&apos;
    command.  The `-g&apos; option suppresses this behavior.

    Exit Status:
    Returns success unless an invalid option is supplied or a variable
    assignment error occurs.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;u&gt;bash builtin&lt;/u&gt; command &lt;u&gt;declare&lt;/u&gt; provides access to variable attributes within the scope of a bash program. &lt;/p&gt;
&lt;p&gt;Here is a list of ways declare may be used. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;declare an arrays &lt;/li&gt;
&lt;li&gt;&lt;a data-scroll href=&quot;#namerefs&quot;&gt;declare namerefs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dump variables&lt;/li&gt;
&lt;li&gt;test functions&lt;/li&gt;
&lt;li&gt;give variable attributes&lt;/li&gt;
&lt;li&gt;remove variable attributes&lt;/li&gt;
&lt;li&gt;list attributes&lt;/li&gt;
&lt;li&gt;make variable read-only&lt;/li&gt;
&lt;li&gt;make variable an integer&lt;/li&gt;
&lt;li&gt;make variable cast into lowercase on assignment&lt;/li&gt;
&lt;li&gt;make variable cast into uppercase on assignment&lt;/li&gt;
&lt;li&gt;make variable or function available in subshells&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;to-declare-an-array&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-declare-an-array&quot; aria-label=&quot;to declare an array permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to declare an array&lt;/h2&gt;
&lt;p&gt;declaring arrays in bash&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;indexed_arrays&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;indexed-arrays&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#indexed-arrays&quot; aria-label=&quot;indexed arrays permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;indexed arrays&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -a&lt;/code&gt; in bash&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;w3-codespan&quot;&gt;-a&lt;/code&gt; option adds the indexed array attribute to the variable name provided to the declare command.&lt;/p&gt;
&lt;h4 id=&quot;declare-indexed-array-variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#declare-indexed-array-variable&quot; aria-label=&quot;declare indexed array variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;declare indexed array variable&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#
# declare an array
#
declare -a VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-indexed-array-key-value&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#set-indexed-array-key-value&quot; aria-label=&quot;set indexed array key value permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;set indexed array key value&lt;/h4&gt;
&lt;p&gt;Array key values may be set on initialization or afterwords. Indices inherit the integer attribute inside square brackets (&quot;&lt;code class=&quot;w3-codespan&quot;&gt;[]&lt;/code&gt;&quot;). Using &lt;code class=&quot;w3-codespan&quot;&gt;declare -p&lt;/code&gt; on an indexed array will list all array keys along with their corresponding assigned values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare an array and set key values
#
declare -a arr=(1) # arr[0]=1
arr[1]=$(( arr[0] + 1 ))
echo ${arr[0]} # 1
echo ${arr[1]} # 2
for i in {1..10}
do
 arr[i]=$(( arr[i-1] + arr[i-2] ))
done
echo ${arr[i]} # 199
declare -p arr
## expect
#declare -a arr=([0]=&quot;1&quot; [1]=&quot;3&quot; [2]=&quot;4&quot; [3]=&quot;7&quot; [4]=&quot;11&quot; [5]=&quot;18&quot; [6]=&quot;29&quot; [7]=&quot;47&quot; [8]=&quot;76&quot; [9]=&quot;123&quot; [10]=&quot;199&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&quot;associative_arrays&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;associative-arrays-hashes-map-dictionary-or-collection-of-keyvalue-pairs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#associative-arrays-hashes-map-dictionary-or-collection-of-keyvalue-pairs&quot; aria-label=&quot;associative arrays hashes map dictionary or collection of keyvalue pairs permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;associative arrays, hashes, map, dictionary, or collection of (key,value) pairs&lt;/h3&gt;
&lt;p&gt;Associative arrays hold key value pairs also called hashes. Unlike indexed arrays, their indices are not limited to integer values. That is, associative array keys may be any string. &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -A&lt;/code&gt; in bash&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;w3-codespan&quot;&gt;-A&lt;/code&gt; option adds the associative array attribute to the variable name provided to the declare command. Note that declaring an associative array within a function will force local scope. To declare scope outside and use in a function omit the associative array declaration command line.&lt;/p&gt;
&lt;h4 id=&quot;declare-associative-array&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#declare-associative-array&quot; aria-label=&quot;declare associative array permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;declare associative array&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#
# declare an associative arrays
#
declare -A VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;local-associative-array&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#local-associative-array&quot; aria-label=&quot;local associative array permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;local associative array&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;foobar() { # foo w/ bar
  echo -n ${FUNCNAME}:
  ## note that local is not required in the case of declare -A
  declare -A arr
  arr[&quot;key&quot;]=value2
  bar
}
rab() { # declares arr local
  echo -n ${FUNCNAME}:
  local arr
  declare -p arr
}
bar() { # may inherit global arr
  echo -n ${FUNCNAME}:
  declare -p arr
}
foo() { # declare arr local to function
  echo -n ${FUNCNAME}:
  ## note that local is not required in the case of declare -A
  declare -A arr
  arr[&quot;key&quot;]=value2
  declare -p arr
}
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
foo
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
( declare -A arr ; arr[&quot;key&quot;]=value ; declare -p arr ; )
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
{ declare -A arr ; arr[&quot;key&quot;]=value ; declare -p arr ; }
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
foo
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
( declare -A arr ; arr[&quot;key&quot;]=value3 ; declare -p arr ; )
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
bar
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
rab
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
foobar
{ echo -n : ; declare -p arr 2&gt;/dev/null || echo no variable named arr 1&gt;&amp;2 ; }
## expect
#:no variable named arr
#foo:declare -A arr=([key]=&quot;value2&quot; )
#:no variable named arr
#declare -A arr=([key]=&quot;value&quot; )
#:no variable named arr
#declare -A arr=([key]=&quot;value&quot; )
#:declare -A arr=([key]=&quot;value&quot; )
#foo:declare -A arr=([key]=&quot;value2&quot; )
#:declare -A arr=([key]=&quot;value&quot; )
#declare -A arr=([key]=&quot;value3&quot; )
#:declare -A arr=([key]=&quot;value&quot; )
#bar:declare -A arr=([key]=&quot;value&quot; )
#:declare -A arr=([key]=&quot;value&quot; )
#rab:declare -- arr
#:declare -A arr=([key]=&quot;value&quot; )
#foobar:bar:declare -A arr=([key]=&quot;value2&quot; )
#:declare -A arr=([key]=&quot;value&quot; )
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;associative-arrays-in-the-wild&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#associative-arrays-in-the-wild&quot; aria-label=&quot;associative arrays in the wild permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;associative arrays in the wild&lt;/h4&gt;
&lt;p&gt;Associative array variable example using array to store document meta name value pairs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare -A document
...
get-document-meta() {
 local document_meta
 local document_meta_name
 local document_meta_value
 document_meta=$(
  cat ${file} \
  | grep \
  -e &apos;&lt;[!]--\s\+[a-z-]\+:[a-z,]\+\s\+--&gt;&apos; --only-matching \
  | sed -e &apos;s/\(.*\)/\1/&apos; \
  -e &apos;s/&lt;!--\s\+//g&apos; \
  -e &apos;s/\s\+--&gt;//g&apos; 
 )
 test ! &quot;${document_meta}&quot; || {
  document_meta_name=$( 
   echo &quot;${document_meta}&quot; | cut -f1 -d:
  )
  document_meta_value=$(
   echo &quot;${document_meta}&quot; | cut -f2 -d:
  )
  document[&quot;${document_meta_name}&quot;]=&quot;${document_meta_value}&quot; 
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;source: &lt;a href=&quot;https://github.com/temptemp3/sh2-u2-theme-default/blob/master/include.sh&quot;&gt;sh2-u2-theme-default/include.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;namerefs&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;to-declare-a-variable-to-be-a-reference-to-another-variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-declare-a-variable-to-be-a-reference-to-another-variable&quot; aria-label=&quot;to declare a variable to be a reference to another variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to declare a variable to be a reference to another variable&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -n&lt;/code&gt; allows you to declare namerefs in bash. That is, we can use it to a name to be used reference another name.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;w3-codespan&quot;&gt;-n&lt;/code&gt; option adds the nameref attribute to the name provided to the declare command.&lt;/p&gt;
&lt;p&gt;Basic usage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare nameref
#
declare -n VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nameref variable example&lt;/p&gt;
&lt;p&gt;Source&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
## test-declare-nameref
## version 0.0.1 - initial
##################################################
test-declare-nameref() {
  declare -n X=x
  declare -i x
  echo setting x to 1 ...
  x=1
  echo x: ${x}
  echo X: ${X}
  echo incrementing x 9 times
  _() { x+=1 ; }
  for i in {1..9} ; do _ ; done
  echo x: ${x}
  echo X: ${X}
  echo unsetting X ...
  unset X
  echo x: ${x}
  echo X: ${X}
}
##################################################
if [ ${#} -eq 0 ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
test-declare-nameref
##################################################
## generated by create-stub2.sh v0.1.2
## on Mon, 22 Jul 2019 20:31:35 +0900
## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;
##################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash test-declare-nameref.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ouput&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setting x to 1 ...
x: 1
X: 1
incrementing x 9 times
x: 10
X: 10
unsetting X ...
x:
X:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-dump-variables&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-dump-variables&quot; aria-label=&quot;to dump variables permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to dump variables&lt;/h2&gt;
&lt;p&gt;Using declare by itself may be used to dump variable names and functions along with their value and definitions, respectfully.&lt;/p&gt;
&lt;p&gt;Declare command example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-test-a-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-test-a-function&quot; aria-label=&quot;to test a function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to test a function&lt;/h2&gt;
&lt;p&gt;The declare command may be used to test if a function has been declared and is usable within the scope of the bash program.&lt;/p&gt;
&lt;p&gt;Function test examples&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# return name and definition of function if declared
#
declare -f ${function_name} 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#
# returns name only of function if declared
#
declare -F ${function_name} 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-give-a-variable-attributes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-give-a-variable-attributes&quot; aria-label=&quot;to give a variable attributes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to give a variable attributes&lt;/h2&gt;
&lt;p&gt;Attribute variable example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# give variable attribute x
#
declare -X VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-remove-variable-attributes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-remove-variable-attributes&quot; aria-label=&quot;to remove variable attributes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to remove variable attributes&lt;/h2&gt;
&lt;p&gt;Use &apos;+&apos; instead of &apos;-&apos;.&lt;/p&gt;
&lt;p&gt;Variable attribute removal example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# remove attribute x from variable
#
declare +X VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Attribute removal behavior may vary for array and readonly variables.&lt;/p&gt;
&lt;h2 id=&quot;to-list-attributes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-list-attributes&quot; aria-label=&quot;to list attributes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to list attributes&lt;/h2&gt;
&lt;p&gt;List all variables in addition to their attributes.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -p&lt;/code&gt; in bash&lt;/p&gt;
&lt;p&gt;Print variables and attributes in bash using the &lt;code class=&quot;w3-codespan&quot;&gt;-p&lt;/code&gt; option displays the attributes of the name provided to the declare command. Variables may include an assigned value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare -p 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-declare-a-variable-without-attributes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-declare-a-variable-without-attributes&quot; aria-label=&quot;to declare a variable without attributes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to declare a variable without attributes&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare&lt;/code&gt; in bash without attributes&lt;/p&gt;
&lt;p&gt;The declare command may be used without specifying attributes resulting in an assignment.&lt;/p&gt;
&lt;p&gt;Declare variable example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare variable without attribute
#
declare VARIABLE[=VALUE] 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;equvalent to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare variable 
#
VARIABLE=[VALUE] 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-declare-a-readonly-variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-declare-a-readonly-variable&quot; aria-label=&quot;to declare a readonly variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to declare a readonly variable&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -r&lt;/code&gt; in bash&lt;/p&gt;
&lt;p&gt;Declare read-only variable in bash using the &lt;code class=&quot;w3-codespan&quot;&gt;-r&lt;/code&gt; option adds the read-only attribute to the variable name provided to the declare command such that the variable may not be reassigned.&lt;/p&gt;
&lt;p&gt;Read-only variable example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare readonly
#
declare -r VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&quot;bash-declare-integer&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;integers&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;to-declare-a-variable-to-be-treated-as-an-integer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-declare-a-variable-to-be-treated-as-an-integer&quot; aria-label=&quot;to declare a variable to be treated as an integer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to declare a variable to be treated as an integer&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -i&lt;/code&gt; in bash&lt;/p&gt;
&lt;p&gt;Declare integer variables in bash using the &lt;code class=&quot;w3-codespan&quot;&gt;-i&lt;/code&gt; option adds the integer attribute to the variable name provided to the declare command such that the variable is to treated as an integer.&lt;/p&gt;
&lt;p&gt;Integer variable example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare integer
#
declare -i VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See also&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;declare-integer.html&quot;&gt;bash declare integer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;to-declare-a-variable-to-be-case-insensitive-or-lowercase&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-declare-a-variable-to-be-case-insensitive-or-lowercase&quot; aria-label=&quot;to declare a variable to be case insensitive or lowercase permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to declare a variable to be case-insensitive, or lowercase&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -l&lt;/code&gt; in bash&lt;/p&gt;
&lt;p&gt;Declare lowercase variables in bash using the &lt;code class=&quot;w3-codespan&quot;&gt;-l&lt;/code&gt; option adds the lowercase attribute to the variable name provided to the declare command such that any value is converted to lowercase on assignment.&lt;/p&gt;
&lt;p&gt;Lower variable example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare lower
#
declare -l VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-declare-a-variable-to-be-uppercase&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-declare-a-variable-to-be-uppercase&quot; aria-label=&quot;to declare a variable to be uppercase permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to declare a variable to be uppercase&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -u&lt;/code&gt; in bash&lt;/p&gt;
&lt;p&gt;Declare uppercase variables in bash using the &lt;code class=&quot;w3-codespan&quot;&gt;-u&lt;/code&gt; option adds the uppercase attribute to the variable name provided to the declare command such that any value is converted to uppercase on assignment.&lt;/p&gt;
&lt;p&gt;Upper variable example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare upper
#
declare -u VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-export-variables-or-functions-to-subshells&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#to-export-variables-or-functions-to-subshells&quot; aria-label=&quot;to export variables or functions to subshells permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;to export variables or functions to subshells&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;w3-codespan&quot;&gt;declare -x&lt;/code&gt; in bash&lt;/p&gt;
&lt;p&gt;Export variables and functions in bash using the &lt;code class=&quot;w3-codespan&quot;&gt;-x&lt;/code&gt; option adds the export attribute to the variable or function name provided to the declare command.&lt;/p&gt;
&lt;h3 id=&quot;export-variable-to-subshells&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#export-variable-to-subshells&quot; aria-label=&quot;export variable to subshells permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;export variable to subshells&lt;/h3&gt;
&lt;p&gt;Export variable example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare export variable
#
declare -x VARIABLE 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;export-function-to-subshells&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#export-function-to-subshells&quot; aria-label=&quot;export function to subshells permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;export function to subshells&lt;/h3&gt;
&lt;p&gt;Export function example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# declare export function
#
declare -xf FUNCTION
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&quot;commands-similar-to-declare&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#commands-similar-to-declare&quot; aria-label=&quot;commands similar to declare permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;commands similar to declare&lt;/h2&gt;
&lt;p&gt;In addition, to declare, the following commands allow modification of bash variable attributes.&lt;/p&gt;
&lt;h3 id=&quot;local&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#local&quot; aria-label=&quot;local permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;local&lt;/h3&gt;
&lt;p&gt;Same as declare but with local bindings for functions&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;local.html&quot;&gt;bash using local&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;typeset&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#typeset&quot; aria-label=&quot;typeset permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;typeset&lt;/h3&gt;
&lt;p&gt;Synonym for declare. That can be used interchangeably. May be used for compatibility with ksh or other POSIX complaint shell; however, set of option available may differ.&lt;/p&gt;
&lt;h3 id=&quot;unset&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#unset&quot; aria-label=&quot;unset permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;unset&lt;/h3&gt;
&lt;p&gt;Remove variable from list of declared variables. Does not apply to indexed and associative arrays. Can be used on functions. Some options similar to declare, local, and typeset.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;questions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#questions&quot; aria-label=&quot;questions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;questions&lt;/h2&gt;
&lt;p&gt;Questions and answers regarding declare in bash.&lt;/p&gt;
&lt;h3 id=&quot;why-declare&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-declare&quot; aria-label=&quot;why declare permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;why declare?&lt;/h3&gt;
&lt;p&gt;Typing. Declare allows you to apply or take away attributes to variables in bash similar to how types or assigned in statically typed programming languages. For example, you may want to make it so a variable may not be reassigned a new value. This can be accomplished using the bash builtin command declare. &lt;/p&gt;
&lt;h3 id=&quot;declare-or-typeset&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#declare-or-typeset&quot; aria-label=&quot;declare or typeset permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;declare or typeset?&lt;/h3&gt;
&lt;p&gt;Either is fine. However, I personally don&apos;t use typeset. Although it doesn&apos;t hurt to know what it is at least or in case you have to migrate to ksh for some reason.&lt;/p&gt;
&lt;h3 id=&quot;do-i-need-declare-to-assign-a-value-to-a-variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#do-i-need-declare-to-assign-a-value-to-a-variable&quot; aria-label=&quot;do i need declare to assign a value to a variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;do I need declare to assign a value to a variable?&lt;/h3&gt;
&lt;p&gt;No. For most cases, you do not need declare to assign values to a variable. However, there may be side effects of declaring variable attributes after assignment. In that case, it would be advantageous to declare attributes before or on assignment in a single statement assigning value to a variable. &lt;/p&gt;
&lt;h3 id=&quot;why-would-i-declare-a-variable-without-value-in-bash&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-would-i-declare-a-variable-without-value-in-bash&quot; aria-label=&quot;why would i declare a variable without value in bash permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;why would I declare a variable without value in bash?&lt;/h3&gt;
&lt;p&gt;You may declare a variable without value to communicate that a variable may be modified from this point on or to unset a variable via assignment.&lt;/p&gt;
&lt;p&gt;It is not necessary to declare a variable for the purpose of initialization if no assignment was made prior to appearance in script.&lt;/p&gt;
&lt;hr&gt;</content:encoded><author></author></item><item><title><![CDATA[Enable metrics collction for an auto scaling group]]></title><description><![CDATA[You created an auto scaling group through the management console. The issue is "group metrics collection is not enabled for the following…]]></description><link>https://temptemp3.github.io/enable-metrics-collction-for-an-auto-scaling-group</link><guid isPermaLink="false">https://temptemp3.github.io/enable-metrics-collction-for-an-auto-scaling-group</guid><category><![CDATA[aws]]></category><category><![CDATA[aws-cli]]></category><category><![CDATA[aws-autoscaling]]></category><pubDate>Wed, 19 Sep 2029 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;You created an auto scaling group through the management console. The issue is &quot;group metrics collection is not enabled for the following auto scaling groups&quot; and; you would simply like to know how to enable metric collection using the AWS CLI. Here you will a &lt;a href=&quot;#aws-cli-wrapper&quot;&gt;bash function aws-cli wrapper&lt;/a&gt; to help automate enabling metrics collection for autoscaling groups in AWS.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Today in AWS, &lt;u&gt;enabling metrics collection for an auto scaling group&lt;/u&gt; was on my to-do list.
(28 Jul 2017)&lt;/p&gt;
&lt;p&gt;This page dedicated to the task of enabling auto scaling metrics collection.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#introduction&quot; aria-label=&quot;introduction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As you may know by know, group metrics collection in AWS is not enabled by default for auto scaling groups. Why?  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Metrics collection is not free;  &lt;/li&gt;
&lt;li&gt;In most cases, autoscaling metrics collection is not need. However, if you would like to track your autoscaling capacity over time, you need to enable auto scaling metrics collection, which can be done using the aws-cli. At the time of creating this document, there was no place to click in the management console, leaving the aws-cli the only way to enable metrics collection for an auto scaling group.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;enable-auto-scaling-metrics-collection-shortcut&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#enable-auto-scaling-metrics-collection-shortcut&quot; aria-label=&quot;enable auto scaling metrics collection shortcut permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enable auto scaling metrics collection shortcut&lt;/h2&gt;
&lt;p&gt;If you are really in a hurry to enable auto scaling metrics collection in AWS that you are currently working on, here is the &lt;a href=&quot;#aws-cli-example&quot;&gt;aws-cli&lt;/a&gt; shortcut you need. &lt;/p&gt;
&lt;h2 id=&quot;enable-auto-scaling-metrics-collection-guide&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#enable-auto-scaling-metrics-collection-guide&quot; aria-label=&quot;enable auto scaling metrics collection guide permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enable auto scaling metrics collection guide&lt;/h2&gt;
&lt;p&gt;If you&apos;ve ever picked up where you left off, in the middle of a test, or are in your free tier period, you will find out or be reminded that metrics collection is not enabled by default. &lt;em&gt;So, what do you do?&lt;/em&gt;&lt;/p&gt;
&lt;!-- write about how to enable auto scaling group metrics collection --&gt;
&lt;p&gt;&lt;strong&gt;Why enable auto scaling metrics collection?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Metrics collection is used by scaling policies to achieve autoscaling.&lt;/p&gt;
&lt;p&gt;Auto scaling groups are created without enabled metrics by default. Auto scaling group metrics collection may be enabled manually via command line through the aws-cli.&lt;/p&gt;
&lt;h2 id=&quot;aws-cli&quot;&gt;AWS CLI&lt;/h2&gt;
&lt;h3 id=&quot;aws-autoscaling-enable-metrics-collection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#aws-autoscaling-enable-metrics-collection&quot; aria-label=&quot;aws autoscaling enable metrics collection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;aws autoscaling enable-metrics-collection&lt;/h3&gt;
&lt;h4 id=&quot;required-options&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#required-options&quot; aria-label=&quot;required options permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;required options&lt;/h4&gt;
&lt;p&gt;The following options are required by the &apos;enable-metrics-collection&apos; command of the &apos;aws autoscaling&apos; command namespace.&lt;/p&gt;
&lt;h5 id=&quot;--auto-scaling-group-name&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#--auto-scaling-group-name&quot; aria-label=&quot;  auto scaling group name permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;--auto-scaling-group-name&lt;/h5&gt;
&lt;p&gt;The name or ARN of the auto scaling group is required.&lt;/p&gt;
&lt;!-- link to arn --&gt;
&lt;h5 id=&quot;--granularity&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#--granularity&quot; aria-label=&quot;  granularity permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;--granularity&lt;/h5&gt;
&lt;p&gt;Despite the only valid value being &quot;1Minute&quot;, granularity is required.&lt;/p&gt;
&lt;h4 id=&quot;aws-cli-example&quot;&gt;example&lt;/h4&gt;
&lt;p&gt;&lt;a name=&quot;enable-metrics-collection&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;bash-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#bash-function&quot; aria-label=&quot;bash function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;bash function&lt;/h5&gt;
&lt;h6 id=&quot;aws-cli-wrapper&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#aws-cli-wrapper&quot; aria-label=&quot;aws cli wrapper permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;aws-cli wrapper&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;&lt;pre&gt;
enable-metrics-collection() { { local auto_scaling_group_name ; auto_scaling_group_name=&quot;${1}&quot; ; }
local granularity
granularity=&quot;1Minute&quot;
aws &lt;br&gt;
autoscaling &lt;br&gt;
enable-metrics-collection &lt;br&gt;
--auto-scaling-group-name &quot;${auto_scaling_group_name}&quot; &lt;br&gt;
--granularity &quot;${granularity}&quot;
}&lt;/p&gt;
&lt;/pre&gt;&lt;/code&gt;
&lt;h2 id=&quot;changelog&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#changelog&quot; aria-label=&quot;changelog permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Changelog&lt;/h2&gt;
&lt;p&gt;(3 Feb 2019)	Minor revision&lt;/p&gt;
&lt;p&gt;(12 Jan 2018)	Update example converting original bash example code into a aws-cli wrapper bash function&lt;/p&gt;
&lt;p&gt;( 7 Aug 2017)	Add introduction&lt;/p&gt;
&lt;p&gt;(28 Jul 2017)	Create document&lt;/p&gt;
&lt;hr&gt;</content:encoded><author></author></item><item><title><![CDATA[Bash functions]]></title><description><![CDATA[Read in 16 minutes Shell functions in bash allow you to name groups of commands to be run at a later time. Once named, command groups may be…]]></description><link>https://temptemp3.github.io/bash-functions</link><guid isPermaLink="false">https://temptemp3.github.io/bash-functions</guid><category><![CDATA[bash]]></category><category><![CDATA[bash-functions]]></category><pubDate>Wed, 19 Sep 2029 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Read in 16 minutes&lt;/p&gt;
&lt;p&gt;Shell functions in bash allow you to name groups of commands to be run at a later time. Once named, command groups may be executed by using the function name. Each function has its own set of positional parameters when called. Variable attributes such as local may apply within a function. &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;function-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function-help&quot; aria-label=&quot;function help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;function help&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;w3-codespan&quot;&gt;help function&lt;/span&gt; tells you how to create functions in bash, about positional parameters, and exit statuses, which is pretty much all that you need to know about bash functions to get started.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;
function: &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-name function&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; COMMANDS &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; or &lt;span class=&quot;token function-name function&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; COMMANDS &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    Define shell function.

    Create a shell &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; named NAME.  When invoked as a simple command,
    NAME runs COMMANDs &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the calling shell&lt;span class=&quot;token string&quot;&gt;&apos;s context.  When NAME is invoked,
    the arguments are passed to the function as &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;...&lt;span class=&quot;token variable&quot;&gt;$n&lt;/span&gt;, and the function&apos;&lt;/span&gt;s
    name is &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$FUNCNAME&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;

    Exit Status:
    Returns success unless NAME is readonly.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&quot;function-types&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function-types&quot; aria-label=&quot;function types permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;function types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;simple functions &lt;/li&gt;
&lt;li&gt;returns non-empty standard output else standard error without a non-zero exit code&lt;/li&gt;
&lt;li&gt;dynamic functions &lt;/li&gt;
&lt;li&gt;functions with variable definitions&lt;/li&gt;
&lt;li&gt;setup function &lt;/li&gt;
&lt;li&gt;sets variable from a function&lt;/li&gt;
&lt;li&gt;wrapper functions &lt;/li&gt;
&lt;li&gt;functions serving as a wrapper to other functions, external, builtin commands&lt;/li&gt;
&lt;li&gt;oop functions &lt;/li&gt;
&lt;li&gt;child functions &lt;/li&gt;
&lt;li&gt;parent functions &lt;/li&gt;
&lt;li&gt;nested functions &lt;/li&gt;
&lt;li&gt;functions inside functions&lt;/li&gt;
&lt;li&gt;once functions &lt;/li&gt;
&lt;li&gt;functions that have payloads that execute at most once&lt;/li&gt;
&lt;li&gt;echo function &lt;/li&gt;
&lt;li&gt;functions that write to standard output&lt;/li&gt;
&lt;li&gt;lazyload function &lt;/li&gt;
&lt;li&gt;functions that have bodies read only before execution&lt;/li&gt;
&lt;li&gt;export function &lt;/li&gt;
&lt;li&gt;functions attributed as export&lt;/li&gt;
&lt;li&gt;anonymous functions &lt;/li&gt;
&lt;li&gt;functions that are once and nameless&lt;/li&gt;
&lt;li&gt;exit functions &lt;/li&gt;
&lt;li&gt;functions used for a trap of exit signal&lt;/li&gt;
&lt;li&gt;read functions &lt;/li&gt;
&lt;li&gt;functions implemented using read&lt;/li&gt;
&lt;li&gt;recursive functions &lt;/li&gt;
&lt;li&gt;functions that call themselves&lt;/li&gt;
&lt;li&gt;map functions &lt;/li&gt;
&lt;li&gt;functions that apply an arbitrary function to elements in a list of arguments, returning the resulting list&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;simple-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#simple-functions&quot; aria-label=&quot;simple functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;simple functions&lt;/h3&gt;
&lt;p&gt;Functions are simple in bash. At least this one is. It puts a string on the screen. &lt;/p&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;simple-&lt;span class=&quot;token function-name function&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; as simple as it gets  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
simple-function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;as simple as it gets&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;dynamic-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dynamic-functions&quot; aria-label=&quot;dynamic functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dynamic functions&lt;/h3&gt;
&lt;p&gt;There are three ways to make functions more dynamic in bash. The first being, passing function names as parameters to other function, the second being using the source, and the third using the function as a router to subcommands.&lt;/p&gt;
&lt;p&gt;The first requires that a function be declared beforehand unless used with the second way.&lt;/p&gt;
&lt;p&gt;The second way requires file I/O. It may be used to implement dynamic function name assignment in bash.&lt;/p&gt;
&lt;h4 id=&quot;the-first-way-pass-a-function-name-as-a-parameter&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-first-way-pass-a-function-name-as-a-parameter&quot; aria-label=&quot;the first way pass a function name as a parameter permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;the first way: pass a function name as a parameter&lt;/h4&gt;
&lt;p&gt;I know what you are thinking, wouldn&apos;t it be nice to declare functions on the fly. Yes, it would but I would argue dynamic functions is something else and good enough. Don&apos;t get me wrong, I&apos;ve been there.&lt;/p&gt;
&lt;p&gt;Your program, bash script, may contain a few function pre-defined with meaningful names; or it may contain hundreds or even thousands. Every function is there for a reason, each with the potential to be called. That is your function universe.&lt;/p&gt;
&lt;p&gt;Let there be an instance in your function universe that a function holds a reference, variable, holding the name of another function in the universe or itself. &lt;/p&gt;
&lt;p&gt;Apply static analysis and fail. That is your dynamic function.&lt;/p&gt;
&lt;p&gt;In more concrete terms, we may have real functions as follows.&lt;/p&gt;
&lt;p&gt;A dynamic function able to call any function in the universe&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dynamic-&lt;span class=&quot;token function-name function&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; function_name &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${1}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;${function_name}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A dynamic function able to call any descendent function in the universe&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dynamic-&lt;span class=&quot;token function-name function&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; function_name &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${1}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;${FUNCNAME}&lt;/span&gt;-&lt;span class=&quot;token variable&quot;&gt;${function_name}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A dynamic function able to call any function of a class in the universe&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dynamic-&lt;span class=&quot;token function-name function&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; function_name &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${1}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  class-name-&lt;span class=&quot;token variable&quot;&gt;${function_name}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are looking for dynamic function, see &lt;a href=&quot;https://github.com/temptemp3/sh2/blob/master/attr.sh&quot;&gt;attr.sh&lt;/a&gt;. get_ and set_ functions are generated on the fly whenever attr is called.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${SH2}&lt;/span&gt;/attr.sh
attr x
attr y
attr z
set_x &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
set_y &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$((&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; get_x &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
set_z &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$((&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; get_y &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
get_x &lt;span class=&quot;token comment&quot;&gt;# 1&lt;/span&gt;
get_y &lt;span class=&quot;token comment&quot;&gt;# 2 &lt;/span&gt;
get_z &lt;span class=&quot;token comment&quot;&gt;# 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;the-second-way-write-a-function-to-file-and-source&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-second-way-write-a-function-to-file-and-source&quot; aria-label=&quot;the second way write a function to file and source permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;the second way: write a function to file and source&lt;/h4&gt;
&lt;p&gt;This method to implement dynamic functions is the same as employed in attr.sh (above). However, it may be viewed in general as writing a function to a file then sourcing. After all, that is what we do.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## test-dynamic-function-second&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## version 0.0.1 - initial&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;
test-dynamic-function-&lt;span class=&quot;token function-name function&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; temp
  &lt;span class=&quot;token assign-left variable&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt; mktemp &lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${temp}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;EOF
&lt;span class=&quot;token variable&quot;&gt;${function_name}&lt;/span&gt;() {
  echo \&lt;span class=&quot;token variable&quot;&gt;${FUNCNAME}&lt;/span&gt;
}
EOF&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${temp}&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -pf &lt;span class=&quot;token variable&quot;&gt;${function_name}&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;${function_name}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -v &lt;span class=&quot;token variable&quot;&gt;${temp}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;}&lt;/span&gt; -eq &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
 &lt;span class=&quot;token assign-left variable&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${1}&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
 &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# wrong args&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;
test-dynamic-function-second
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## generated by create-stub2.sh v0.1.2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## on Sun, 07 Jul 2019 10:56:38 +0900&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## see &amp;amp;lt;https://github.com/temptemp3/sh2&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##################################################&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/test-dynamic-function-second.sh&quot;&gt;test-dynamic-function-second.sh&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-third-way-use-function-as-a-router&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-third-way-use-function-as-a-router&quot; aria-label=&quot;the third way use function as a router permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;the third way: use function as a router&lt;/h4&gt;
&lt;p&gt;In this way, we use the function as a router such that the first argument indicates a subcommand and the rest its arguments. You can see how dynamic things can get considering the number of possible subcommands is infinite, or at least until you run out of disk space.&lt;/p&gt;
&lt;h3 id=&quot;setup-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#setup-functions&quot; aria-label=&quot;setup functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;setup functions&lt;/h3&gt;
&lt;p&gt;One thing you may want to do in bash is set a variable from a function. The variable may have global scope or nearest local scope. The following example shows how a setup function would work using local scope to declare a variable.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;shopt&lt;/span&gt; -s expand_aliases
&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;
{
  local account_name
  local account_type
  local account_balance
}
&apos;&lt;/span&gt;
setup-&lt;span class=&quot;token function-name function&quot;&gt;acount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;acount_name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Joe Doe&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# fictitious name&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;acount_acount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# buck&lt;/span&gt;
  &lt;span class=&quot;token assign-left variable&quot;&gt;acount_type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;savings &lt;span class=&quot;token comment&quot;&gt;# account&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function-name function&quot;&gt;bank&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  bind-account
  setup-account
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;wrapper-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#wrapper-functions&quot; aria-label=&quot;wrapper functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wrapper functions&lt;/h3&gt;
&lt;p&gt;In case you would like to add context to function within the scope of your bash script, wrapper function eliminates unnecessary repetition in your code and put all the trivial things inside the wrapper so that you can focus on getting things done when developing a program.&lt;/p&gt;
&lt;h4 id=&quot;cli-wrapper-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cli-wrapper-functions&quot; aria-label=&quot;cli wrapper functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cli wrapper functions&lt;/h4&gt;
&lt;p&gt;CLIs often come with an extensive list of options and subcommands, which make them a good use case for wrapper functions. Once you know what you need, put it in a wrapper function.&lt;/p&gt;
&lt;h5 id=&quot;aws-cli-wrapper-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#aws-cli-wrapper-functions&quot; aria-label=&quot;aws cli wrapper functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;aws cli wrapper functions&lt;/h5&gt;
&lt;p&gt;CLIs come with a hoard of options and subcommands. The AWS-CLI is no different. Here is an example wrapper function for enabling metrics collection in auto scaling groups.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://temptemp3.github.io/aws-autoscaling-enable-metrics-collection-for-asg.html#aws-cli-example&quot;&gt;aws-cli wrapper function to enable metrics collection in an auto scaling group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lazyload-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lazyload-function&quot; aria-label=&quot;lazyload function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;lazyload function&lt;/h3&gt;
&lt;p&gt;There may be a time when you want to lazyload functions in bash. That means to only source function code when relevant.&lt;/p&gt;
&lt;p&gt;Suppose that your big script with hundreds of lines called &lt;u&gt;foo.sh&lt;/u&gt;. It happens.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;foo.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${SH2}&lt;/span&gt;/aliases/commands.sh
foo-bar-&lt;span class=&quot;token function-name function&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
foo-bar-&lt;span class=&quot;token function-name function&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
foo-bar-&lt;span class=&quot;token function-name function&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
foo-&lt;span class=&quot;token function-name function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  commands
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function-name function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  commands
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;}&lt;/span&gt; -eq &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
 &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
 &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# wrong args&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
foo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want to make foo-bar and its dependents lazy load. That is unless the first argument provided by the user happens to be bar, functions beginning with foo-bar are not sourced.&lt;/p&gt;
&lt;p&gt;First, put foo-bar functions in another file like so.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;foo-bar.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;foo-bar-&lt;span class=&quot;token function-name function&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
foo-bar-&lt;span class=&quot;token function-name function&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
foo-bar-&lt;span class=&quot;token function-name function&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
foo-&lt;span class=&quot;token function-name function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  commands
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see I just made a copy of foo.sh and filtered out everything that isn&apos;t foo-bar.&lt;/p&gt;
&lt;p&gt;Next, replace foo-bar functions with code to lazyload foo-bar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;foo.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${SH2}&lt;/span&gt;/aliases/commands.sh
foo-&lt;span class=&quot;token function-name function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; foo-bar.sh &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${FUNCNAME}&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${@}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;token function-name function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  commands
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;}&lt;/span&gt; -eq &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
 &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
 &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# wrong args&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
foo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;export-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#export-function&quot; aria-label=&quot;export function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;export function&lt;/h3&gt;
&lt;p&gt;No life exists outside the shell. In the beginning, there was nothing but an abyss. Lines were read from beyond the tilde in the background. Then, after 4 billion cycles glyphic light filled the foreground. And then there was bash.&lt;/p&gt;
&lt;p&gt;Export functions provide a means to include functional code, functions, within another shell that is not a subshell.&lt;/p&gt;
&lt;p&gt;Meet &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/true.sh&quot;&gt;true.sh&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt; -v true.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -f &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-name function&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;}&lt;/span&gt; -eq &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
 &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
 &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# wrong args&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; true.sh &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${?}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 0&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt; true.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${?}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;true.sh is a simple bash script that may be changed a export function.&lt;/p&gt;
&lt;p&gt;In our shell, we declare a function also called true.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; true.sh &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# true&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt; true.sh  &lt;span class=&quot;token comment&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -fx &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt; -v true.sh &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt;/dev/null 
&lt;span class=&quot;token function-name function&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;declare&lt;/span&gt; -f &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-name function&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;}&lt;/span&gt; -eq &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
 &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
 &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# wrong args&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; true.sh &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# true&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt; true.sh &lt;span class=&quot;token comment&quot;&gt;# true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For our true to be used in true.sh as a separate shell, the export attribute needs to be added to true. This is done using &lt;span class=&quot;w3-codespan&quot;&gt;declare -xf NAME&lt;/span&gt; or another bash &lt;a href=&quot;builtins.html&quot;&gt;builtins&lt;/a&gt;. See also &lt;a href=&quot;declare.html&quot;&gt;bash declare&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;true() {
  echo true
}
( . true.sh ) # true
bash true.sh  # 
declare -fx true
( . true.sh ) # true
bash true.sh  # true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;oop-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oop-functions&quot; aria-label=&quot;oop functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;oop functions&lt;/h3&gt;
&lt;p&gt;One thing that may be missing in bash is builtin support for object-oriented programming concepts such as parent/child relationships. However, in practice, you can get away with such relationships, at least I have.&lt;/p&gt;
&lt;p&gt;A parent is any function that can call another function, one of its children, using the &lt;span class=&quot;w3-codespan&quot;&gt;${FUNCNAME}&lt;/span&gt; special variable. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# parent function&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;${FUNCNAME}&lt;/span&gt;-child
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
parent-&lt;span class=&quot;token function-name function&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# child function&lt;/span&gt;
  &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;nested-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#nested-functions&quot; aria-label=&quot;nested functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;nested functions&lt;/h3&gt;
&lt;p&gt;There are times when you need nested functions in bash such as when implementing once functions. Simply nest a function definition within another. It&apos;s that simple. Nesting functions come in handy when implementing devices such as classes for object-oriented programming.&lt;/p&gt;
&lt;h4 id=&quot;example-nested-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-nested-function&quot; aria-label=&quot;example nested function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;example: nested function&lt;/h4&gt;
&lt;p&gt;bash function in function example&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-name function&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# nested function&lt;/span&gt;
    &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  inner
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;once-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#once-functions&quot; aria-label=&quot;once functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;once functions&lt;/h3&gt;
&lt;p&gt;Suppose that we need a function that only runs the first time it is called, i.e. we need a once function. See how it is done in bash.&lt;/p&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;token function-name function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${FUNCNAME}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
test-&lt;span class=&quot;token function-name function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  once
  once
  once
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
test-once&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/test-once.sh&quot;&gt;test-once.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;once&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;echo-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#echo-function&quot; aria-label=&quot;echo function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;echo function&lt;/h3&gt;
&lt;p&gt;Let an echo function be any function containing 1 or more echo commands. In case no output is produced by the function, the result may be interpreted as failure. Additionally, an echo function may be a function or an alias named echo.&lt;/p&gt;
&lt;p&gt;Pseudocommands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo-function() {
  # some code ...
  echo ${some_variable}
}
echo-function ${some_arguments}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pseudo-output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;some output
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;anonymous-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#anonymous-functions&quot; aria-label=&quot;anonymous functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;anonymous functions&lt;/h3&gt;
&lt;p&gt;In bash, the closest you are going to get to anonymous is good enough. Here is what I mean. If that is not good enough, then I don&apos;t know what is.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
## test-anonymous-function
## version 0.0.1 - initial
##################################################
anonymous() {
  _() {
    true
  }
}
test-anonymous-function() {
  _() { { anonymous ; }
    echo anonymous functions are:
    echo - may be nested
    echo - short
    echo - may use positional parameters
    echo - may be once
  }
  _
  _
}
##################################################
if [ ${#} -eq 0 ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
test-anonymous-function
##################################################
## generated by create-stub2.sh v0.1.2
## on Sun, 07 Jul 2019 11:32:14 +0900
## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;
##################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/test-anonymous-function.sh&quot;&gt;test-anonymous-function.sh&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;exit-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#exit-functions&quot; aria-label=&quot;exit functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;exit functions&lt;/h3&gt;
&lt;p&gt;Exit functions extend the builtin exit command. In a script, it may be used to execute cleanup and logging routines. An example of how to override the exit command follows.&lt;/p&gt;
&lt;p&gt;Script&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
## test-function-exit
## version 0.0.1 - initial
##################################################
set -e # errexit
trap exit EXIT
exit() {
  builtin exit ${?}
}
test-function-exit() {
  echo noise
  ( return 0 )
  echo silence
}
##################################################
if [ ${#} -eq 0 ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
test-function-exit
##################################################
## generated by create-stub2.sh v0.1.2
## on Mon, 08 Jul 2019 19:50:33 +0900
## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;
##################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/test-function-exit.sh&quot;&gt;test-function-exit.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash test-function-exit.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;noise
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;read-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#read-functions&quot; aria-label=&quot;read functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;read functions&lt;/h3&gt;
&lt;p&gt;read functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;use read builtin command&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read from standard input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;may be recursive&lt;/li&gt;
&lt;li&gt;may use positional parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;recursive-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#recursive-functions&quot; aria-label=&quot;recursive functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;recursive functions&lt;/h3&gt;
&lt;p&gt;Recursive functions call themselves. &lt;/p&gt;
&lt;p&gt;Here is an example of a simple recursive function in bash called fun.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fun() { # recursive function
  test ! &quot;${once}&quot; || { true ; return ; }
  once=&quot;true&quot;
  fun
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we can also use the special variable &lt;span class=&quot;w3-codespan&quot;&gt;${FUNCNAME}&lt;/span&gt; in place of the function name on recursive function call lines to (in my opinion) to improve readability as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fun() { # recursive function
  test ! &quot;${once}&quot; || { true ; return ; }
  once=&quot;true&quot;
  ${FUNCNAME}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;local-variables-in-recursive-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#local-variables-in-recursive-functions&quot; aria-label=&quot;local variables in recursive functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;local variables in recursive functions&lt;/h4&gt;
&lt;p&gt;In general, you should limit the scope of a variable to the function it is intended to be used in. This is especially, true in recursive functions. Neglecting variable scope in recursive functions could produce unexpected behavior at runtime due to side effects.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
## test-function-recursive
## version 0.0.1 - initial
##################################################
fun() { # recursive function
  test &quot;${max_fun}&quot;	|| local -i max_fun_level=255
  test &quot;${fun_level}&quot;	|| local -i fun_level=1
  test ! ${fun_level} -gt ${max_fun_level} || { echo &quot;&quot; ; return ; }
  echo -n &quot;${fun_level} &quot;
  fun_level+=1
  ${FUNCNAME}
}
test-function-recursive() {
  fun
}
##################################################
if [ ${#} -eq 0 ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
test-function-recursive
##################################################
## generated by create-stub2.sh v0.1.2
## on Sun, 28 Jul 2019 21:32:36 +0900
## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;
##################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;map-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#map-functions&quot; aria-label=&quot;map functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;map functions&lt;/h3&gt;
&lt;p&gt;Script&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
## test-map-functions
## version 0.0.1 - initial
##################################################
square() { { local -i n ; n=${1} ; }
  echo $(( n * n ))
}
map() { { local function_name ; function_name=&quot;${1}&quot; ;  }
  local car cdr
  read -t 1 car cdr
  test &quot;${car}&quot; || { true ; return ; }
  ${function_name} ${car} 
  echo ${cdr} | ${FUNCNAME} ${function_name}
}
test-map-functions() {
  seq 10 | xargs | map square
}
##################################################
if [ ${#} -eq 0 ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
time test-map-functions
##################################################
## generated by create-stub2.sh v0.1.2
## on Sat, 27 Jul 2019 21:13:45 +0900
## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;
##################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/test-map-functions.sh&quot;&gt;test-map-functions.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash test-map-functions.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
4
9
16
25
36
49
64
81
100
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&quot;function-variables&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function-variables&quot; aria-label=&quot;function variables permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;function variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local variables *&lt;/li&gt;
&lt;li&gt;global variables *&lt;/li&gt;
&lt;li&gt;positional parameters *&lt;/li&gt;
&lt;li&gt;special variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;local-variables&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#local-variables&quot; aria-label=&quot;local variables permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;local variables&lt;/h3&gt;
&lt;p&gt;In bash, all variables defined within functions are global by default. The bash builtin &lt;span class=&quot;w3-codespan&quot;&gt;local&lt;/span&gt; may be used within a function to declare a NAME as a variable with local scope.&lt;/p&gt;
&lt;p&gt;Variable scope is relative to location declared in the script and presence of keywords used such as &lt;a href=&quot;declare.html&quot;&gt;declare&lt;/a&gt;, &lt;a href=&quot;local.html&quot;&gt;local&lt;/a&gt;, or global. That is, not all variables declared outside a variable are necessarily global. A variable may be local to caller function and global to the function being called but not global to the script.&lt;/p&gt;
&lt;p&gt;If NAME is a global or has otherwise been declared outside of the function, the value assigned to NAME is effectively unset if local is present.  &lt;/p&gt;
&lt;p&gt;If NAME is not a global and has not been declared outside the function, NAME inherits the local attribute. &lt;/p&gt;
&lt;h4 id=&quot;example-local-and-global-variables-in-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-local-and-global-variables-in-functions&quot; aria-label=&quot;example local and global variables in functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;example: local and global variables in functions&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;##
## case NAME is global and unset in function by local
##
_() { 
  echo ${return}
  local return
  echo ${return}
}
return=1
_
echo ${return}
# 1
#
#
unset return
unset -f _
##
## case NAME is local and set in function
##
_() {
  echo ${return}
  return=2
  echo ${return}
}
_
echo ${return}
# 
# 2
# 
unset return
unset -f _
##
## case NAME is global and set in function without local
##
_() {
  echo ${return}
  return=4
  echo ${return}
}
return=3
_
echo ${return}
# 3
# 4
# 4
unset return
unset -f _
##
## case NAME is global and set in function with local
##
_() {
  echo ${return}
  local return=5
  echo ${return}
}
return=6
_
echo ${return}
# 6
# 5
# 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;global-variables&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#global-variables&quot; aria-label=&quot;global variables permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;global variables&lt;/h3&gt;
&lt;p&gt;All variables in bash are global unless set inside a function with the &lt;span class=&quot;w3-codespan&quot;&gt;local&lt;/span&gt; command. Global variables may be referenced when a local variable exists sharing the same NAME using &lt;span class=&quot;w3-codespan&quot;&gt;declare -g&lt;/span&gt; to set a global variable from inside a function as follows.&lt;/p&gt;
&lt;p&gt;Script&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
## test-function-global-variables
## version 0.0.1 - initial
##################################################
bar=0
test-function-global-variables() {
  local bar=1
  declare -g bar=2
  echo ${bar}
}
##################################################
if [ ${#} -eq 0 ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
test-function-global-variables
echo ${bar}
##################################################
## generated by create-stub2.sh v0.1.2
## on Fri, 19 Jul 2019 20:52:09 +0900
## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;
##################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/test-function-global-variables.sh&quot;&gt;test-function-global-variables.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash test-function-global-variables.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;positional-parameters&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#positional-parameters&quot; aria-label=&quot;positional parameters permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;positional parameters&lt;/h3&gt;
&lt;p&gt;When a function is called its arguments are automatically assigned to positional parameters based on order appearing after the function name. &lt;span class=&quot;w3-codespan&quot;&gt;${1}&lt;/span&gt; &lt;span class=&quot;w3-codespan&quot;&gt;${2}&lt;/span&gt; &lt;span class=&quot;w3-codespan&quot;&gt;...&lt;/span&gt; are positional parameters. &lt;span class=&quot;w3-codespan&quot;&gt;${#}&lt;/span&gt; holds the number of positional parameters available. For example, if &lt;span class=&quot;w3-codespan&quot;&gt;${#}&lt;/span&gt; is 9, then the last assigned positional parameter is &lt;span class=&quot;w3-codespan&quot;&gt;${9}&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Script&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
## test-function-positional-parameter-count
## version 0.0.1 - initial
##################################################
func() {
  echo There are ${#} positional parameter$( test ! ${#} -gt 1 || echo s )
  for i in $( seq ${#} )
  do
  echo \${${i}} is ${@:i:1}
  done
}
test-function-positional-parameter-count() {
  func $( seq $(( RANDOM % 100 )) | sort --random-sort )
}
##################################################
if [ ${#} -eq 0 ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
test-function-positional-parameter-count
##################################################
## generated by create-stub2.sh v0.1.2
## on Sun, 21 Jul 2019 20:37:44 +0900
## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;
##################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/test-function-positional-parameter-count.sh&quot;&gt;test-function-positional-parameter-count.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash test-function-positional-parameter-count.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;There are 3 positional parameters
${1} is 2
${2} is 1
${3} is 3
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&quot;function-operations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function-operations&quot; aria-label=&quot;function operations permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;function operations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;declare function *&lt;/li&gt;
&lt;li&gt;get function name *&lt;/li&gt;
&lt;li&gt;list functions *&lt;/li&gt;
&lt;li&gt;function return *&lt;/li&gt;
&lt;li&gt;function exit *&lt;/li&gt;
&lt;li&gt;calling functions *&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;declare-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#declare-function&quot; aria-label=&quot;declare function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;declare function&lt;/h3&gt;
&lt;p&gt;There are essentially two ways to create functions in bash that do not use the &lt;a href=&quot;declare.html&quot;&gt;declare&lt;/a&gt; bash builtin.&lt;/p&gt;
&lt;p&gt;1st method&lt;/p&gt;
&lt;p&gt;In this method to make functions in bash, you can use the function keyword followed by the name and command list.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function NAME { COMMANDS ; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2nd method&lt;/p&gt;
&lt;p&gt;In this method to make bash functions, you would omit the function keyword. It is okay.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NAME { COMMANDS ; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Coincidentally, we may declare a function outside of a script using bash history as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ COMMAND ; }
NAME () !!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if you that is too much, I recommend using 1 of the 2 methods prescribed above. By the way, I generally steer towards the 2nd method.&lt;/p&gt;
&lt;h3 id=&quot;get-function-name&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#get-function-name&quot; aria-label=&quot;get function name permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;get function name&lt;/h3&gt;
&lt;p&gt;To get a function name inside a function, use the &lt;span class=&quot;w3-codespan&quot;&gt;${FUNCNAME}&lt;/span&gt; special variable.&lt;/p&gt;
&lt;h3 id=&quot;list-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#list-functions&quot; aria-label=&quot;list functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;list functions&lt;/h3&gt;
&lt;p&gt;There are two ways to list all bash function using the &lt;span class=&quot;w3-codespan&quot;&gt;declare&lt;/span&gt; command. &lt;/p&gt;
&lt;p&gt;To list function names in bash, use the &lt;span class=&quot;w3-codespan&quot;&gt;declare -F&lt;/span&gt; bash builtin command. &lt;/p&gt;
&lt;p&gt;To list function names along with the body, use the &lt;span class=&quot;w3-codespan&quot;&gt;declare -f&lt;/span&gt; bash builtin command.&lt;/p&gt;
&lt;h3 id=&quot;function-return&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function-return&quot; aria-label=&quot;function return permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;function return&lt;/h3&gt;
&lt;p&gt;At any point within a function, it may return control to its caller on the return command. &lt;/p&gt;
&lt;p&gt;Function&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fun() {
  return
  code never been touched
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The return command takes an argument between 0 and 255 to be returned instead of the return value of the last command executed. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;help return
return: return [n]
    Return from a shell function.

    Causes a function or sourced script to exit with the return value
    specified by N.  If N is omitted, the return status is that of the
    last command executed within the function or script.

    Exit Status:
    Returns N, or failure if the shell is not executing a function or script.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A function returns automatically after the last command returning the exit code of the last command. &lt;/p&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;more-fun() {
  false
}
more-fun
echo ${?}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;function-exit&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function-exit&quot; aria-label=&quot;function exit permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;function exit&lt;/h3&gt;
&lt;p&gt;A function may return control to the caller of the function, exit the function, using the bash builtin &lt;span class=&quot;w3-codespan&quot;&gt;return&lt;/span&gt; command. Conversely, the &lt;span class=&quot;w3-codespan&quot;&gt;exit&lt;/span&gt; command will return control to the caller of the script.&lt;/p&gt;
&lt;h3 id=&quot;calling-functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#calling-functions&quot; aria-label=&quot;calling functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;calling functions&lt;/h3&gt;
&lt;p&gt;There are two ways to call functions in bash; the first being statically by the function name or dynamically using variables.&lt;/p&gt;
&lt;h4 id=&quot;the-first-way-static-function-call&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-first-way-static-function-call&quot; aria-label=&quot;the first way static function call permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;the first way: static function call&lt;/h4&gt;
&lt;p&gt;Suppose that we have a function called &lt;span class=&quot;w3-codespan&quot;&gt;foo&lt;/span&gt;. In interactive mode, we call it by typing its name end hitting enter. In the script, we list its name as a command and it is called during execution of the script.&lt;/p&gt;
&lt;h4 id=&quot;the-second-way-dynamic-function-call&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-second-way-dynamic-function-call&quot; aria-label=&quot;the second way dynamic function call permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;the second way: dynamic function call&lt;/h4&gt;
&lt;p&gt;Function calls need not be explicit in bash. That is, a variable or output to command substitution may call a function. &lt;/p&gt;
&lt;p&gt;Remember in the first way, we have a function named &lt;span class=&quot;w3-codespan&quot;&gt;foo&lt;/span&gt;. In the second way, we have a variable named &lt;span class=&quot;w3-codespan&quot;&gt;bar&lt;/span&gt;. Suppose we set &lt;span class=&quot;w3-codespan&quot;&gt;bar=&quot;foo&quot;&lt;/span&gt;. In the script &lt;span class=&quot;w3-codespan&quot;&gt;${bar}&lt;/span&gt; calls &lt;span class=&quot;w3-codespan&quot;&gt;foo&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now suppose that we have two other functions called &lt;span class=&quot;w3-codespan&quot;&gt;foo2&lt;/span&gt; and &lt;span class=&quot;w3-codespan&quot;&gt;foo3&lt;/span&gt; and &lt;span class=&quot;w3-codespan&quot;&gt;bar=1&lt;/span&gt;. What does &lt;span class=&quot;w3-codespan&quot;&gt;foo${bar}&lt;/span&gt; call? You get the picture.&lt;/p&gt;
&lt;p&gt;See also &lt;a href=&quot;functions.html#dynamic_functions&quot;&gt;dynamic functions&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;function-return-values&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function-return-values&quot; aria-label=&quot;function return values permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;function return values&lt;/h2&gt;
&lt;p&gt;When it comes to functions in bash, one topic that often comes is returning values.There are many different things that you may return from a function, return values, exit codes, or nothing at all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exit code *&lt;/li&gt;
&lt;li&gt;string *&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;arrays *&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;associative array *&lt;/li&gt;
&lt;li&gt;indexed array *&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;side effects&lt;/li&gt;
&lt;li&gt;void &lt;/li&gt;
&lt;li&gt;void with side effects&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;exit-code&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#exit-code&quot; aria-label=&quot;exit code permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;exit code&lt;/h3&gt;
&lt;p&gt;The exit code of the last command run inside the function is returned.&lt;/p&gt;
&lt;p&gt;Function that returns with a non-zero exit code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fun() { false ; }
fun
echo ${?} # 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Function that returns with an exit code of zero&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fun() { true ; }
fun
echo ${?} # 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;string&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#string&quot; aria-label=&quot;string permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;string&lt;/h3&gt;
&lt;p&gt;Output (standard output and error) returned by the function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fun() { echo string ; }
var return_value=$( fun )
echo ${return_value} # string
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;arrays&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#arrays&quot; aria-label=&quot;arrays permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;arrays&lt;/h3&gt;
&lt;p&gt;It is possible to return an array from a function in bash. See the example showing how to return arrays from functions below.&lt;/p&gt;
&lt;h4 id=&quot;associative-arrays&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#associative-arrays&quot; aria-label=&quot;associative arrays permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;associative arrays&lt;/h4&gt;
&lt;p&gt;It is possible to return an associative array from a function through standard output. Sanitizing the string representation of the array before instantiation is recommended. An example showing how to return associative arrays from functions follows.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
## test-associative-arrays
## version 0.0.1 - initial
##################################################
. ${SH2}/cecho.sh
sanitize-assoc-array() { 
  grep -e &apos;^declare\s-A\s[a-z_]*=(\(\[[^]]*.=&quot;[^&quot;]*.\s\)\+)$&apos; -o |
  head -1
}
create-test-assoc-array() {
  {
    declare -A assoc_arr
    assoc_arr[&apos;a&apos;]=1
    assoc_arr[&apos;b&apos;]=2
    assoc_arr[&apos;c&apos;]=3
    declare -p assoc_arr
  } | sanitize-assoc-array
}
modify-test-assoc-array() {
  assoc_arr[&apos;a&apos;]=1
  assoc_arr[&apos;b&apos;]=2
  assoc_arr[&apos;c&apos;]=3
}
test-associative-arrays() {
  cecho green &quot;testing associative arrays ...&quot;
  cecho yellow &quot;test i&quot;
  cecho yellow &quot;receive associative array returned by another function&quot;
  cecho yellow &quot;and set name to hash&quot;
  cecho yellow &quot;expect declare -A hash=([a]=\&quot;1\&quot; [b]=\&quot;2\&quot; [c]=\&quot;3\&quot; )&quot;
  arr=$( create-test-assoc-array )
  eval ${arr/assoc_arr/hash} # instantiate within function
  declare -p hash
  unset hash
  cecho yellow &quot;test ii&quot;
  cecho yellow &quot;receive associative array returned by another function&quot;
  cecho yellow &quot;and use as is&quot;
  cecho yellow &quot;expect declare -A hash=([a]=\&quot;1\&quot; [b]=\&quot;2\&quot; [c]=\&quot;3\&quot; )&quot;
  eval $( create-test-assoc-array ) # instantiate within function
  declare -p assoc_arr
  unset assoc_arry
  cecho yellow &quot;test iii&quot;
  cecho yellow &quot;modify associative array in another function&quot;
  cecho yellow &quot;expect declare -A hash=([a]=\&quot;1\&quot; [b]=\&quot;2\&quot; [c]=\&quot;3\&quot; )&quot;
  declare -A assoc_arr
  modify-test-assoc-array
  declare -p assoc_arr
  cecho green &quot;done testing associative arrays&quot;
}
##################################################
if [ ${#} -eq 0 ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
test-associative-arrays
##################################################
## generated by create-stub2.sh v0.1.2
## on Sat, 06 Jul 2019 13:53:40 +0900
## see &amp;lt;https://github.com/temptemp3/sh2&amp;gt;
##################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/temptemp3/ba.sh/blob/master/test-associative-arrays.sh&quot;&gt;test-associative-arrays.sh&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;indexed-arrays&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#indexed-arrays&quot; aria-label=&quot;indexed arrays permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;indexed arrays&lt;/h4&gt;
&lt;p&gt;It is possible to return an indexed array from a shell function. Sanitizing the string representation of the array before instantiation is recommended. See the example showing how to return from functions above.&lt;/p&gt;
&lt;hr&gt;</content:encoded><author></author></item><item><title><![CDATA[Headless Wordpress]]></title><description><![CDATA[As a side project, I worked with Gatsby, sourcing wordpress to create Self::starter, keeping a log of all the things I ended up adding as…]]></description><link>https://temptemp3.github.io/headless-wordpress</link><guid isPermaLink="false">https://temptemp3.github.io/headless-wordpress</guid><category><![CDATA[gatsbyjs]]></category><category><![CDATA[wordpress]]></category><category><![CDATA[project]]></category><pubDate>Tue, 19 Dec 2023 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As a side project, I worked with Gatsby, sourcing wordpress to create &lt;a href=&quot;https://temptemp3.github.io/hdlesswp/&quot;&gt;Self::starter&lt;/a&gt;, keeping a log of all the things I ended up adding as the bare essentials for any headless Wordpress starter. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Help creating a headless wordpress site&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Need help creating a headless wordpress site? If you are interested, drop me a line. Let&apos;s make it happen.&lt;/p&gt;</content:encoded><author></author></item><item><title><![CDATA[Bash pattern matching]]></title><description><![CDATA[Late in 2019, I started writing an article on the subject bash pattern matching. Later in the following year, it was published on 13 Mar…]]></description><link>https://temptemp3.github.io/bash-pattern-matching</link><guid isPermaLink="false">https://temptemp3.github.io/bash-pattern-matching</guid><category><![CDATA[bash]]></category><pubDate>Tue, 19 Mar 2013 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Late in 2019, I started writing an article on the subject &lt;a href=&quot;https://linuxhint.com/bash_pattern_matching/&quot;&gt;bash pattern matching&lt;/a&gt;. Later in the following year, it was published on 13 Mar 2020. Now, I am creating a page for the record with hopes to expand on previous work and answer any questions if need be.&lt;/p&gt;</content:encoded><author></author></item><item><title><![CDATA[Conversational AI]]></title><description><![CDATA[In 2019, I was involved in 2 projects to create chatbots using the collaborative platform SAP Conversational AI. Unfortunately, the work was…]]></description><link>https://temptemp3.github.io/conversational-ai</link><guid isPermaLink="false">https://temptemp3.github.io/conversational-ai</guid><category><![CDATA[ai]]></category><category><![CDATA[conversatational ai]]></category><category><![CDATA[sap conversatational ai]]></category><category><![CDATA[chatbots]]></category><category><![CDATA[python]]></category><pubDate>Sun, 19 Jan 2003 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In 2019, I was involved in 2 projects to create chatbots using the collaborative platform SAP Conversational AI. Unfortunately, the work was taken to the shed and never seen again. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chatbots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CLI Help Bot&lt;/p&gt;
&lt;p&gt;Chatbot that receives help question from users and refers to the right answer in addition to performing administrative tasks such as password resets for users.&lt;/p&gt;
&lt;p&gt;Managed WordPress Bot&lt;/p&gt;
&lt;p&gt;Chatbot that help a user create a WordPress site through chat. Credentials are emailed to the user upon site creation. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Help creating chatbots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Need help creating a chatbot? If the chatbot you want to create is not listed, we can make one of those too. Drop me a line. Let&apos;s make it happen.&lt;/p&gt;</content:encoded><author></author></item><item><title><![CDATA[Google Apps Script]]></title><description><![CDATA[In a project, I was tasked with automating workflows in Google Sheets that would save a team working in Sheets time. That is where Google…]]></description><link>https://temptemp3.github.io/google-apps-script</link><guid isPermaLink="false">https://temptemp3.github.io/google-apps-script</guid><category><![CDATA[gas]]></category><category><![CDATA[google apps script]]></category><category><![CDATA[apps script]]></category><category><![CDATA[javascript]]></category><category><![CDATA[automation]]></category><pubDate>Mon, 19 Nov 2001 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In a project, I was tasked with automating workflows in Google Sheets that would save a team working in Sheets time. That is where Google Apps Script, aka GAS, came in. Here are my working list of notes.&lt;/p&gt;
&lt;h2 id=&quot;spreadsheet&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spreadsheet&quot; aria-label=&quot;spreadsheet permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;spreadsheet&lt;/h2&gt;
&lt;p&gt;The GAS spreadsheet service allows interactive with spreadsheets stored in OneDrive. Here are my spreadsheet specific notes on Google apps script.&lt;/p&gt;
&lt;h2 id=&quot;handling-case-of-cell-with-value-0&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#handling-case-of-cell-with-value-0&quot; aria-label=&quot;handling case of cell with value 0 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;handling case of cell with value 0&lt;/h2&gt;
&lt;p&gt;We want to perform an action if both cells are empty while omitting the case when cell value is 0. Cell is an object with properties of one cell. value is the value of another cell.&lt;/p&gt;
&lt;p&gt;Performs action if cell value is 0 (not good)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cell&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// using transitive property&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// perform action&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Does not perform action if cell value is 0 (good)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cell&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// perform action&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;help-with-google-apps-script&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#help-with-google-apps-script&quot; aria-label=&quot;help with google apps script permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Help with Google Apps Script&lt;/h2&gt;
&lt;p&gt;Need help with Google Apps Script? If you don&apos;t see what you want to do listed, don&apos;t worry. We can do that too. Drop me a line. Let&apos;s make it happen.&lt;/p&gt;</content:encoded><author></author></item></channel></rss>